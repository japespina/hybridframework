/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ewb.qa.tdd.GUI;

import ewb.qa.tdd.SQLObj;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.JTable;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import java.awt.*;
import java.awt.event.*;
import org.apache.poi.ss.util.NumberToTextConverter;
import ewb.qa.tdd.GUI.MainGUI.*;
import ewb.qa.tdd.SeleniumObj;
import javax.swing.table.TableColumnModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.*;

import org.apache.commons.io.FileUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.chrome.ChromeDriver;

/**
 *
 * @author JPE61800
 */
public class TestScript extends javax.swing.JFrame {

    /**
     * Creates new form TestScript
     */
    public TestScript() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ProjCodeTxt = new javax.swing.JTextField();
        ProjDescTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ModuleTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        FieldIdTxt = new javax.swing.JTextField();
        FieldNameTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        ElementIdTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        ElementXpathTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        CancelBtn = new javax.swing.JButton();
        ChangeBtn = new javax.swing.JButton();
        SaveBtn = new javax.swing.JButton();
        NewBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        LinkValueTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        UrlTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        MenuRefTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        WSRefTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        ElementMsgTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        ElementResultTxt = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        FieldRefTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TitleTxt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        SequenceTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        ElementValueTxt = new javax.swing.JTextField();
        FunctionCodeCmb = new javax.swing.JComboBox<>();
        DeleteBtn = new javax.swing.JButton();
        RecordIdTxt = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TestScriptTbl = new javax.swing.JTable();
        ElementTypeCmb = new javax.swing.JComboBox<>();
        ElementActionCmb = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Test Script Maintenance");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Project Code :");

        jLabel3.setText("Function Code :");

        jLabel4.setText("Module :");

        jLabel5.setText("Field ID :");

        jLabel6.setText("Element ID : ");

        jLabel7.setText("Element Xpath :");

        jLabel8.setText("Element Type :");

        jLabel9.setText("Element Action :");

        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        ChangeBtn.setText("Change");
        ChangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeBtnActionPerformed(evt);
            }
        });

        SaveBtn.setText("Save");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        NewBtn.setText("New");
        NewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        jLabel10.setText("Field Name :");

        jLabel11.setText("Link Value :");

        jLabel12.setText("Url :");

        jLabel13.setText("Menu Ref :");

        jLabel14.setText("Worksheet Ref :");

        jLabel16.setText("Message :");

        jLabel17.setText("Result :");

        jLabel18.setText("Field Ref :");

        jLabel2.setText("Title :");

        jLabel19.setText("Sequence :");

        jLabel15.setText("Element Value :");

        FunctionCodeCmb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FunctionCodeCmbMouseClicked(evt);
            }
        });
        FunctionCodeCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FunctionCodeCmbActionPerformed(evt);
            }
        });

        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        TestScriptTbl = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        TestScriptTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TestScriptTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TestScriptTblMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(TestScriptTbl);

        ElementTypeCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BLANK", "Browse", "Frame", "Dropdown Box", "Input Box", "Button", "Radio", "Text Message", "NewTab", "NewWindow", "SelectWindow" }));

        ElementActionCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BLANK", "GetTitle", "SendKeys", "Click", "GetText", "SwitchTo", "Close", "Select" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FunctionCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ModuleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TitleTxt))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(UrlTxt))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(4, 4, 4)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ProjCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ProjDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RecordIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(FieldIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(FieldNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(ElementIdTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                                                .addComponent(ElementXpathTxt)))
                                        .addGap(139, 139, 139)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(MenuRefTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(WSRefTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ElementMsgTxt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(LinkValueTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                    .addComponent(FieldRefTxt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(ElementResultTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SequenceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ElementTypeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ElementActionCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ElementValueTxt))))
                        .addGap(0, 287, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ChangeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ProjCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProjDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RecordIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ModuleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(TitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FunctionCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(FieldIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FieldNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12)
                    .addComponent(UrlTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ElementIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(ElementTypeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ElementXpathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(ElementActionCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(MenuRefTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(WSRefTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(FieldRefTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(ElementValueTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ElementMsgTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(ElementResultTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LinkValueTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel19)
                    .addComponent(SequenceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelBtn)
                    .addComponent(ChangeBtn)
                    .addComponent(SaveBtn)
                    .addComponent(NewBtn)
                    .addComponent(BackBtn)
                    .addComponent(DeleteBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        ProjCodeTxt.setText(MainGUI.getProjectCode());
        display();
        loadTestScriptTbl();
        //loadFunctionCodeLst();
        loadFunctionCodeCmb();
        DefaultSettings();
        
        InitializeTestScriptScroll();
        
    }//GEN-LAST:event_formWindowOpened

    private void display(){
        //JFrame f = new JFrame("TestScript");
        //TestScript f = new TestScript();
        //f.setExtendedState(JFrame.MAXIMIZED_BOTH);
        //f.setVisible(true);
        if(this.getExtendedState() != TestScript.MAXIMIZED_BOTH){
            this.setExtendedState(TestScript.MAXIMIZED_BOTH);
        }
        else{
            this.setExtendedState(TestScript.NORMAL);
        }
    }
            
    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        this.setVisible(false);
        ExecutePage execPage = new ExecutePage();
        execPage.setVisible(true);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        //Search and Validate for Insert or Update record
        JFrame jFrame = new JFrame();
        int saveflag = 0;
        //int tableCount = TestScriptTbl.getRowCount();
        boolean executeflag = true;
        int recordflag = 0; //1 - New Record, 2 - Existing Record
        
        try{
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                //CallableStatement cStmt = conn.prepareCall("{call Search_PageTestScript_ByProjCode(?,?,?,?,?)}");
                CallableStatement cStmt = null;
                
                String projcode = ProjCodeTxt.getText();
                String projdesc = ProjDescTxt.getText();
                String funccode = FunctionCodeCmb.getSelectedItem().toString();
                String module = ModuleTxt.getText();
                String fieldid = FieldIdTxt.getText();
                String fieldname = FieldNameTxt.getText();
                String elemid = ElementIdTxt.getText();
                if(elemid.equals("") || elemid == ""){
                    elemid = "null";
                }
                String elemxpath = ElementXpathTxt.getText();
                if(elemxpath.equals("") || elemxpath == ""){
                    elemxpath = "null";
                }
                
                String linkvalue = LinkValueTxt.getText();
                if(linkvalue.equals("") || linkvalue == ""){
                    linkvalue = "null";
                }
                
                String url = UrlTxt.getText();
                if(url.equals("") || url == ""){
                    url = "null";
                }

                String title = TitleTxt.getText();
                if(title.equals("") || title == ""){
                    title = "null";
                }
                                
                String elemtype = ElementTypeCmb.getSelectedItem().toString();
                String elemvalue = ElementValueTxt.getText();
                if(elemvalue.equals("") || elemvalue == ""){
                    elemvalue = "null";
                }
                
                String elemaction = ElementActionCmb.getSelectedItem().toString();
                String menuref = MenuRefTxt.getText();
                if(menuref.equals("") || menuref == ""){
                    menuref = "null";
                }
                
                String workref = WSRefTxt.getText();
                if(workref.equals("") || workref == ""){
                    workref = "null";
                }
                
                String fieldref = FieldRefTxt.getText();
                if(fieldref.equals("") || fieldref == ""){
                    fieldref = "null";
                }
                
                String elemmsg = ElementMsgTxt.getText();
                if(elemmsg.equals("") || elemmsg == ""){
                    elemmsg = "null";
                }
                
                String elemresult = ElementResultTxt.getText();
                if(elemresult.equals("") || elemresult == ""){
                    elemresult = "null";
                }
                
                String seq = SequenceTxt.getText();               
                
                /*
	@id INT,
	@proj_code NVARCHAR(20),
	@menu_code NVARCHAR(20),
	@page_module NVARCHAR(50),
	@page_fieldid NVARCHAR(50)                
                */
                
                
                String id = RecordIdTxt.getText();
                if(id.equals("") || id == ""){
                    id = "0";
                    recordflag = 1;
                    //Without Record ID - Insert New Record

                    saveflag = InsertNewRecord(projcode, funccode, module, fieldid, fieldname, elemid, elemxpath, linkvalue, url, title, elemtype, elemvalue, elemaction, menuref, workref, fieldref, elemmsg, elemresult, Integer.parseInt(seq));
                }
                else{
                    recordflag = 2;
                    //With Record ID - Update Existing Record

                    cStmt = conn.prepareCall("{call Update_PageTestScript(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
                    /*
                    1@id INT,
                    2@proj_code NVARCHAR(20),
                    3@menu_code NVARCHAR(20),
                    4@page_module NVARCHAR(50),
                    5@page_fieldid NVARCHAR(50),
                    6@page_fieldname NVARCHAR(100),
                    7@element_id NVARCHAR(200),
                    8@element_xpath NVARCHAR(200),
                    9@link_value NVARCHAR(50),
                    10@page_url NVARCHAR(200),
                    11@page_title NVARCHAR(100),
                    @element_type NVARCHAR(50),
                    @element_value NVARCHAR(100),
                    @element_action NVARCHAR(50),
                    @menu_reference NVARCHAR(50),
                    @worksheet_reference NVARCHAR(50),
                    @field_reference NVARCHAR(50),
                    @element_message NVARCHAR(500),
                    @element_result NVARCHAR(100),
                    @sequence INT                     
                    */
                    
                    cStmt.setInt(1, Integer.parseInt(id));
                    cStmt.setNString(2, projcode);
                    cStmt.setNString(3, funccode);
                    cStmt.setNString(4, module);
                    cStmt.setNString(5, fieldid);
                    cStmt.setNString(6, fieldname);
                    cStmt.setNString(7, elemid);
                    cStmt.setNString(8, elemxpath);
                    cStmt.setNString(9, linkvalue);
                    cStmt.setNString(10, url);
                    cStmt.setNString(11, title);
                    cStmt.setNString(12, elemtype);
                    cStmt.setNString(13, elemvalue);
                    cStmt.setNString(14, elemaction);
                    cStmt.setNString(15, menuref);
                    cStmt.setNString(16, workref);
                    cStmt.setNString(17, fieldref);
                    cStmt.setNString(18, elemmsg);
                    cStmt.setNString(19, elemresult);
                    cStmt.setInt(20, Integer.parseInt(seq));
                    
                    saveflag = cStmt.executeUpdate();              
                    conn.commit();
                    cStmt.close();
                }
                
                if(saveflag < 0){
                        JOptionPane.showMessageDialog(jFrame,  "Record Saving Successful ", "Test Script - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                        conn.close();
                        DefaultSettings();
                        //loadTestScriptTbl();
                        
                        loadTestScriptByFuncCode(funccode);
                }
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Test Script Saving Failed " + 
                               "\n" + errMessage, "Test Script - Maintenance", 0);
        }
    }//GEN-LAST:event_SaveBtnActionPerformed

    public int InsertNewRecord(String ProjCode, String FuncCode, String Module, String FieldId, String FieldName, String ElementId, String ElementXpath, String LinkValue, String Url, String Title, 
            String ElementType, String ElementValue, String ElementAction, String MenuRef, String WorkRef, String FieldRef, String ElementMsg, String ElementResult, int Sequence){
            JFrame jFrame = new JFrame();
            int saveflag = 0;
            try{
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                //Search_PageTestScriptGreaterThanEqual_ByGivenSeq
                //CallableStatement cStmt = conn.prepareCall("{call Search_PageTestScriptGreaterThanEqual_ByGivenSeq(?,?,?,?)}", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //CallableStatement cStmt = conn.prepareCall("{call Search_PageTestScript_ByProjCodeFuncCodeGreaterThanSeq(?,?,?)}", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                
                CallableStatement cStmt = conn.prepareCall("{call Search_PageTestScriptGreaterThan_GetRowCount(?,?,?)}");
                
                CallableStatement uCS = null;
                CallableStatement iCS = null;
                /*
	@proj_code NVARCHAR(20),
	@menu_code NVARCHAR(20),
	@page_module NVARCHAR(50),
	@sequence INT         
                */
                /*
                cStmt.setNString(1, ProjCode);
                cStmt.setNString(2, FuncCode);
                cStmt.setNString(3, Module);
                cStmt.setInt(4, Sequence);
                */
                
                cStmt.setNString(1, ProjCode);
                cStmt.setNString(2, FuncCode);
                cStmt.setInt(3, Sequence);
                ResultSet rs = cStmt.executeQuery();
                
                //getResultSet grs = cStmt.execute();
                        
                //IF NO RECORD - INSERT NEW RECORD
                
                int updateflag = 0;
                int insertflag = 0;
                int recordCount = 0;
                if(rs.next()){
                    recordCount = rs.getInt(1);
                    rs.close();
                    cStmt.close();
                }
               
                if(recordCount > 0){
                    cStmt = conn.prepareCall("{call Search_PageTestScript_ByProjCodeFuncCodeGreaterThanSeq(?,?,?)}", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    cStmt.setNString(1, ProjCode);
                    cStmt.setNString(2, FuncCode);
                    cStmt.setInt(3, Sequence);                    
                    
                    rs = cStmt.executeQuery();
                    while(rs.next()){
                        /*
                        PT.ID,
                        PT.PROJ_CODE,
                        PT.MENU_CODE,
                        PT.PAGE_MODULE,
                        PT.PAGE_FIELDID,
                        PT.SEQUENCE
                        */
                        int id = rs.getInt(1);
                        String projcode = rs.getNString(2);
                        String funccode = rs.getNString(3);
                        String module = rs.getNString(4);
                        String fieldid = rs.getNString(5);
                        int seq = rs.getInt(6);
                        int givenseq = seq + 1;
                        
                        uCS = conn.prepareCall("{call Update_PageTestScript_BySequece(?,?,?,?,?,?,?)}");
                        /*
                        @id INT,
                        @proj_code NVARCHAR(20),
                        @menu_code NVARCHAR(20),
                        @page_module NVARCHAR(50),
                        @page_fieldid NVARCHAR(50),
                        @given_sequence INT,
                        @current_sequence INT                        
                        */                        

                        uCS.setInt(1,id);
                        uCS.setNString(2, projcode);
                        uCS.setNString(3, funccode);
                        uCS.setNString(4, module);
                        uCS.setNString(5, fieldid);
                        uCS.setInt(6, seq);
                        uCS.setInt(7, givenseq);

                        updateflag = uCS.executeUpdate();
                    }
                    conn.commit();
                    uCS.close();
                    
                    iCS = conn.prepareCall("{call Insert_PageTestscript(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
                    /*
                    @proj_code NVARCHAR(20),
                    @menu_code NVARCHAR(20),
                    @page_module NVARCHAR(50),
                    @page_fieldid NVARCHAR(50),
                    @page_fieldname NVARCHAR(100),
                    @element_id NVARCHAR(200),
                    @element_xpath NVARCHAR(200),
                    @link_value NVARCHAR(50),
                    @page_url NVARCHAR(200),
                    @page_title NVARCHAR(100),
                    @element_type NVARCHAR(50),
                    @element_value NVARCHAR(100),
                    @element_action NVARCHAR(50),
                    @menu_reference NVARCHAR(50),
                    @worksheet_reference NVARCHAR(50),
                    @field_reference NVARCHAR(50),
                    @element_message NVARCHAR(500),
                    @element_result NVARCHAR(100),
                    @sequence INT                     
                    */
                    iCS.setNString(1, ProjCode);
                    iCS.setNString(2, FuncCode);
                    iCS.setNString(3, Module);
                    iCS.setNString(4, FieldId);
                    iCS.setNString(5, FieldName);
                    iCS.setNString(6, ElementId);
                    iCS.setNString(7, ElementXpath);
                    iCS.setNString(8, LinkValue);
                    iCS.setNString(9, Url);
                    iCS.setNString(10, Title);
                    iCS.setNString(11, ElementType);
                    iCS.setNString(12, ElementValue);
                    iCS.setNString(13, ElementAction);
                    iCS.setNString(14, MenuRef);
                    iCS.setNString(15, WorkRef);
                    iCS.setNString(16, FieldRef);
                    iCS.setNString(17, ElementMsg);
                    iCS.setNString(18, ElementResult);
                    iCS.setInt(19, Sequence);
                    
                    insertflag = iCS.executeUpdate();
                   
                    conn.commit();
                    iCS.close();
                    conn.close();
                }
                
                //IF RECORD EXIST - UPDATE EXISTING RECORD AND INSERT NEW RECORD
                else{
                    iCS = conn.prepareCall("{call Insert_PageTestscript(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
                    /*
                    @proj_code NVARCHAR(20),
                    @menu_code NVARCHAR(20),
                    @page_module NVARCHAR(50),
                    @page_fieldid NVARCHAR(50),
                    @page_fieldname NVARCHAR(100),
                    @element_id NVARCHAR(200),
                    @element_xpath NVARCHAR(200),
                    @link_value NVARCHAR(50),
                    @page_url NVARCHAR(200),
                    @page_title NVARCHAR(100),
                    @element_type NVARCHAR(50),
                    @element_value NVARCHAR(100),
                    @element_action NVARCHAR(50),
                    @menu_reference NVARCHAR(50),
                    @worksheet_reference NVARCHAR(50),
                    @field_reference NVARCHAR(50),
                    @element_message NVARCHAR(500),
                    @element_result NVARCHAR(100),
                    @sequence INT                     
                    */
                    iCS.setNString(1, ProjCode);
                    iCS.setNString(2, FuncCode);
                    iCS.setNString(3, Module);
                    iCS.setNString(4, FieldId);
                    iCS.setNString(5, FieldName);
                    iCS.setNString(6, ElementId);
                    iCS.setNString(7, ElementXpath);
                    iCS.setNString(8, LinkValue);
                    iCS.setNString(9, Url);
                    iCS.setNString(10, Title);
                    iCS.setNString(11, ElementType);
                    iCS.setNString(12, ElementValue);
                    iCS.setNString(13, ElementAction);
                    iCS.setNString(14, MenuRef);
                    iCS.setNString(15, WorkRef);
                    iCS.setNString(16, FieldRef);
                    iCS.setNString(17, ElementMsg);
                    iCS.setNString(18, ElementResult);
                    iCS.setInt(19, Sequence);
                    
                    insertflag = iCS.executeUpdate();
                   
                    conn.commit();
                    iCS.close();
                    conn.close();
                }
                
                if(updateflag < 0){
                    return -1;                    
                }
                else if(insertflag < 0){
                    return -1;
                }
                else{
                    return 0;
                }
            }
            catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Test Script Saving Failed " + 
                               "\n" + errMessage, "Test Script - Maintenance", 0);

                return 0;
            }
    }
    
    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
            DefaultSettings();
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void ChangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeBtnActionPerformed
            SaveMode();
    }//GEN-LAST:event_ChangeBtnActionPerformed

    private void FunctionCodeCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FunctionCodeCmbActionPerformed
        // TODO add your handling code here:
        String eventAction = evt.getActionCommand().toString();
        int getIndex = FunctionCodeCmb.getSelectedIndex();
        int getItemCount = FunctionCodeCmb.getItemCount();
        
        //FunctionCodeCmb.get
        if(getIndex > -1 && getItemCount > 1){
            String getValue = FunctionCodeCmb.getSelectedItem().toString();
        //    
           loadTestScriptByFuncCode(getValue);
        }
    }//GEN-LAST:event_FunctionCodeCmbActionPerformed

    private void FunctionCodeCmbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FunctionCodeCmbMouseClicked
        // TODO add your handling code here:
        //int getSelectIndex = FunctionCodeCmb.getSelectedIndex();
        //String getSelectValue = FunctionCodeCmb.getSelectedItem().toString();
        //loadTestScriptByFuncCode(getSelectValue);
        
    }//GEN-LAST:event_FunctionCodeCmbMouseClicked

    private void NewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBtnActionPerformed
        // TODO add your handling code here:
        NewMode();
        NewModeValues();
    }//GEN-LAST:event_NewBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        // TODO add your handling code here:
        JFrame jFrame = new JFrame();
        try{

            String Id = RecordIdTxt.getText();
            String ProjCode = ProjCodeTxt.getText();
            String FuncCode = FunctionCodeCmb.getSelectedItem().toString();
            String Module = ModuleTxt.getText();
            String FieldId = FieldIdTxt.getText();
            String Seq = SequenceTxt.getText();            
            int executeflag = 0;
            int response = 0;
            
            response = JOptionPane.showConfirmDialog(jFrame, "Are you sure you want to delete the following record?" + "\n" + 
                    "Record ID: " + Id + "\n" +
                    "Project Code: " + ProjCode + "\n" + 
                    "Function Code: " + FuncCode + "\n" + 
                    "Module: " + Module + "\n" + 
                    "Field ID: " + FieldId + "\n" +
                    "Sequence Number: " + Seq, "Test Script - Maintenance", JOptionPane.YES_NO_OPTION);
            
            if(response == 0){
                //********************************
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();            
                CallableStatement cStmt = null;

                // *********************************************************************************************************************************************************************************************
                // DELETE SPECIFIC RECORD IN PAGE_TESTSRIPT
                // *********************************************************************************************************************************************************************************************
                cStmt = conn.prepareCall("{call Delete_PageTestScript(?,?,?,?,?)}");
                /*
                @id INT,
                @proj_code NVARCHAR(20),
                @menu_code NVARCHAR(20),
                @page_module NVARCHAR(50),
                @page_fieldid NVARCHAR(50)            
                */
                cStmt.setInt(1, Integer.parseInt(Id));
                cStmt.setNString(2, ProjCode);
                cStmt.setNString(3, FuncCode);
                cStmt.setNString(4, Module);
                cStmt.setNString(5, FieldId);
                
                int sqlresponse = cStmt.executeUpdate();
                if(sqlresponse < 0){
                    executeflag = -1;
                    conn.commit();
                    cStmt.close();
                }
                // *********************************************************************************************************************************************************************************************

                // *********************************************************************************************************************************************************************************************
                // SEARCH EXISTING RECORD AFTER DELETED ITEM
                // *********************************************************************************************************************************************************************************************
                cStmt = conn.prepareCall("{call Search_PageTestScriptGreaterThan_ByGivenSeq(?,?,?,?)}");
                /*
                @proj_code NVARCHAR(20),
                @menu_code NVARCHAR(20),
                @page_module NVARCHAR(50),
                @sequence INT      
                */

                cStmt.setNString(1, ProjCode);
                cStmt.setNString(2, FuncCode);
                cStmt.setNString(3, Module);
                cStmt.setInt(4, Integer.parseInt(Seq));

                ResultSet rs = cStmt.executeQuery();
                while(rs.next()){
                    /*
                    PT.ID,
                    PT.PROJ_CODE,
                    PT.MENU_CODE,
                    PT.PAGE_MODULE,
                    PT.PAGE_FIELDID,
                    PT.SEQUENCE                
                    */

                    int rId = rs.getInt(1);
                    String rProjCode = rs.getNString(2);
                    String rMenuCode = rs.getNString(3);
                    String rModule = rs.getNString(4);
                    String rFieldId = rs.getNString(5);
                    int rSeq = rs.getInt(6);
                    int rGivenSeq = rSeq - 1;

                    // *********************************************************************************************************************************************************************************************
                    // UPDATE EXISTING RECORD
                    // *********************************************************************************************************************************************************************************************
                    CallableStatement uCS = conn.prepareCall("{call Update_PageTestScript_BySequece(?,?,?,?,?,?,?)}");
                    /*
                    @id INT,
                    @proj_code NVARCHAR(20),
                    @menu_code NVARCHAR(20),
                    @page_module NVARCHAR(50),
                    @page_fieldid NVARCHAR(50),
                    @current_sequence INT,
                    @given_sequence INT                
                    */

                    uCS.setInt(1, rId);
                    uCS.setNString(2, rProjCode);
                    uCS.setNString(3, rMenuCode);
                    uCS.setNString(4, rModule);
                    uCS.setNString(5, rFieldId);
                    uCS.setInt(6, rSeq);
                    uCS.setInt(7, rGivenSeq);

                    executeflag = uCS.executeUpdate();
                    // *********************************************************************************************************************************************************************************************
                    conn.commit();
                    uCS.close();
                }   

                if(executeflag < 0){
                        JOptionPane.showMessageDialog(jFrame,  "Record Saving Successful ", "Test Script - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                        //conn.commit();
                        //cStmt.close();
                        //conn.close();
                        //DefaultSettings();
                        //loadTestScriptTbl();
                }

                cStmt.close();
                conn.close();

                DefaultSettings();
                loadTestScriptByFuncCode(FuncCode);
                //********************************
            }

        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Test Script Saving Failed " + 
                               "\n" + errMessage, "Test Script - Maintenance", 0);            
        }
            
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void TestScriptTblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TestScriptTblMousePressed
        // TODO add your handling code here:
        JFrame jFrame = new JFrame();
        if(evt.getClickCount() == 2){
            TableModel tblmodel = TestScriptTbl.getModel();
            int indexRow = TestScriptTbl.getSelectedRow();
            /*
            1-"ID",
            2-"MENU CODE",
            3-"MODULE",
            4-"FIELD ID",
            5-"FIELD NAME",
            6-"ELEM ID",
            7-"ELEM XPATH",
            8-"LINK VALUE",
            9-"URL",
            10-"TITLE",
            11-"ELEM TYPE",
            12-"ELEM VALUE",
            13-"ELEM ACTION",
            14-"MENU REF",
            15-"WORK REF",
            16-"FIELD REF",
            17-"ELEM MSG",
            18-"ELEM RESULT",
            19-"SEQ"}
            */
            String Id = tblmodel.getValueAt(indexRow, 0).toString();
            String MenuCode = tblmodel.getValueAt(indexRow, 1).toString();
            String Module = tblmodel.getValueAt(indexRow, 2).toString();
            String FieldId = tblmodel.getValueAt(indexRow, 3).toString();
            String FieldName = tblmodel.getValueAt(indexRow, 4).toString();
            String ElementId = tblmodel.getValueAt(indexRow, 5).toString();
            String ElementXpath = tblmodel.getValueAt(indexRow, 6).toString();
            String LinkValue = tblmodel.getValueAt(indexRow, 7).toString();
            String Url = tblmodel.getValueAt(indexRow, 8).toString();
            String Title = tblmodel.getValueAt(indexRow, 9).toString();
            String ElementType = tblmodel.getValueAt(indexRow, 10).toString();
            String ElementValue = tblmodel.getValueAt(indexRow, 11).toString();
            String ElementAction = tblmodel.getValueAt(indexRow, 12).toString();
            String MenuRef = tblmodel.getValueAt(indexRow, 13).toString();
            String WorkRef = tblmodel.getValueAt(indexRow, 14).toString();
            String FieldRef = tblmodel.getValueAt(indexRow, 15).toString();
            String ElementMsg = tblmodel.getValueAt(indexRow, 16).toString();
            String ElementResult = tblmodel.getValueAt(indexRow, 17).toString();
            String Sequence = tblmodel.getValueAt(indexRow, 18).toString();
            
            RecordIdTxt.setText(Id);
            FieldIdTxt.setText(FieldId);
            FieldNameTxt.setText(FieldName);
            ElementIdTxt.setText(ElementId);
            ElementXpathTxt.setText(ElementXpath);
            LinkValueTxt.setText(LinkValue);
            UrlTxt.setText(Url);
            TitleTxt.setText(Title);
            ElementTypeCmb.setSelectedItem(ElementType);
            ElementValueTxt.setText(ElementValue);
            ElementActionCmb.setSelectedItem(ElementAction);
            MenuRefTxt.setText(MenuRef);
            WSRefTxt.setText(WorkRef);
            FieldRefTxt.setText(FieldRef);
            ElementMsgTxt.setText(ElementMsg);
            ElementResultTxt.setText(ElementResult);
            SequenceTxt.setText(Sequence);
            
            ChangeMode();
        }
    }//GEN-LAST:event_TestScriptTblMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestScript.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestScript.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestScript.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestScript.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestScript().setVisible(true);
            }
        });
    }

    public void loadTestScriptTbl(){
        JFrame jFrame = new JFrame();
        try{
                String projcode = MainGUI.getProjectCode();
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                CallableStatement  cStmt = conn.prepareCall("{call Search_AllFunctionTestScript_ByProjCode(?)}");
                cStmt.setNString(1, projcode);
                ResultSet rs = cStmt.executeQuery();
                
                TestScriptTbl.setModel(new DefaultTableModel(null, new String[] {"ID","MENU CODE","MODULE","FIELD ID","FIELD NAME","ELEM ID","ELEM XPATH","LINK VALUE","URL","TITLE","ELEM TYPE","ELEM VALUE","ELEM ACTION","MENU REF","WORK REF","FIELD REF","ELEM MSG","ELEM RESULT","SEQ"}));
                
                /*
                TestScriptTbl.getColumnModel().getColumn(0).setPreferredWidth(10); //ID
                //TestScriptTbl.getColumnModel().getColumn(1).setPreferredWidth(5); //PROJ CODE
                TestScriptTbl.getColumnModel().getColumn(1).setPreferredWidth(5); //MENU CODE
                TestScriptTbl.getColumnModel().getColumn(2).setPreferredWidth(10); //MODULE
                TestScriptTbl.getColumnModel().getColumn(3).setPreferredWidth(50); //FIELD ID
                TestScriptTbl.getColumnModel().getColumn(4).setPreferredWidth(50); //FIELD NAME
                TestScriptTbl.getColumnModel().getColumn(5).setPreferredWidth(200); //ELEM ID
                TestScriptTbl.getColumnModel().getColumn(6).setPreferredWidth(200); //ELEM XPATH
                TestScriptTbl.getColumnModel().getColumn(7).setPreferredWidth(10); //LINK VALUE
                TestScriptTbl.getColumnModel().getColumn(8).setPreferredWidth(20); //URL
                TestScriptTbl.getColumnModel().getColumn(9).setPreferredWidth(10); //TITLE
                TestScriptTbl.getColumnModel().getColumn(10).setPreferredWidth(50); //ELEM TYPE
                TestScriptTbl.getColumnModel().getColumn(11).setPreferredWidth(10); //ELEM VALUE
                TestScriptTbl.getColumnModel().getColumn(12).setPreferredWidth(50); //ELEM ACTION
                TestScriptTbl.getColumnModel().getColumn(13).setPreferredWidth(10); //MENU REF
                TestScriptTbl.getColumnModel().getColumn(14).setPreferredWidth(10); //WORK REF
                TestScriptTbl.getColumnModel().getColumn(15).setPreferredWidth(10); //FIELD REF
                TestScriptTbl.getColumnModel().getColumn(16).setPreferredWidth(10); //ELEM MSG
                TestScriptTbl.getColumnModel().getColumn(17).setPreferredWidth(10); //ELEM RESULT
                TestScriptTbl.getColumnModel().getColumn(18).setPreferredWidth(5); //SEQUENCE
                */
                
                while(rs.next()){
                        /*
                        [ID] = PT.ID,
                        [PROJCODE] = PT.PROJ_CODE,
                        [MENUCODE] = PT.MENU_CODE,
                        [MODULE] = PT.PAGE_MODULE,
                        [FIELDID] = PT.PAGE_FIELDID,
                        [FIELDNAME] = PT.PAGE_FIELDNAME,
                        [ELEMID] = PT.ELEMENT_ID,
                        [ELEMXPATH] = PT.ELEMENT_XPATH,
                        [LINKVALUE] = PT.LINK_VALUE,
                        [URL] = PT.PAGE_URL,
                        [TITLE] = PT.PAGE_TITLE,
                        [ELEMTYPE] = PT.ELEMENT_TYPE,
                        [ELEMVALUE] = PT.ELEMENT_VALUE,
                        [ELEMACTION] = PT.ELEMENT_ACTION,
                        [MENUREF] = PT.MENU_REFERENCE,
                        [WORKREF] = PT.WORKSHEET_REFERENCE,
                        [FIELDREF] = PT.FIELD_REFERENCE,
                        [ELEMMSG] = PT.ELEMENT_MESSAGE,
                        [ELEMRESULT] = PT.ELEMENT_RESULT,
                        [SEQ] = PT.SEQUENCE                    
                        */
                        String id = NumberToTextConverter.toText(rs.getInt("ID"));
                        String menucode = rs.getNString("MENUCODE");
                        String module = rs.getNString("MODULE");
                        String fieldid = rs.getNString("FIELDID");
                        String fieldname = rs.getNString("FIELDNAME");
                        String elemid = rs.getNString("ELEMID");
                        String elemxpath = rs.getNString("ELEMXPATH");
                        String linkvalue = rs.getNString("LINKVALUE");
                        String url = rs.getNString("URL");
                        String title = rs.getNString("TITLE");
                        String elemtype = rs.getNString("ELEMTYPE");
                        String elemvalue = rs.getNString("ELEMVALUE");
                        String elemaction = rs.getNString("ELEMACTION");
                        String menuref = rs.getNString("MENUREF");
                        String workref = rs.getNString("WORKREF");
                        String fieldref = rs.getNString("FIELDREF");
                        String elemmsg = rs.getNString("ELEMMSG");
                        String elemresult = rs.getNString("ELEMRESULT");
                        String seq = NumberToTextConverter.toText(rs.getInt("SEQ"));
                        
                        String[] tblData = {id, menucode, module, fieldid, fieldname, elemid, elemxpath, linkvalue, url, title, elemtype, elemvalue, elemaction, menuref, workref, fieldref, elemmsg, elemresult, seq};
                        DefaultTableModel tblModel = (DefaultTableModel)TestScriptTbl.getModel();
                        tblModel.addRow(tblData);
                        
                        DefaultSettings();

                }
                
                TestScriptTbl.getColumnModel().getColumn(0).setPreferredWidth(35); //Record ID
                TestScriptTbl.getColumnModel().getColumn(3).setPreferredWidth(145); //Field ID
                TestScriptTbl.getColumnModel().getColumn(4).setPreferredWidth(145); //Field Name
                TestScriptTbl.getColumnModel().getColumn(5).setPreferredWidth(145); //Element ID
                TestScriptTbl.getColumnModel().getColumn(6).setPreferredWidth(145); //Element Xpath
                
                TestScriptTbl.getColumnModel().getColumn(1).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(1).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(2).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(2).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(13).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(13).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(14).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(14).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(16).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(16).setMaxWidth(0);
                
                cStmt.close();
                conn.close();
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                 JOptionPane.showMessageDialog(jFrame,  "Test Script loading failed " + 
                               "\n" + errMessage, "Test Script - Maintenance", 0);
        }
            
    }
    
    public void DefaultSettings(){
                RecordIdTxt.setEnabled(false);
                ProjCodeTxt.setEnabled(false);
                ProjDescTxt.setEnabled(false);
                //MenuCodeTxt.setEnabled(false);
                FunctionCodeCmb.setEnabled(true);
                
                //FunctionLst.setEnabled(false);
                ModuleTxt.setEnabled(false);
                FieldIdTxt.setEnabled(false);
                FieldNameTxt.setEnabled(false);
                ElementIdTxt.setEnabled(false);
                ElementXpathTxt.setEnabled(false);
                LinkValueTxt.setEnabled(false);
                UrlTxt.setEnabled(false);
                TitleTxt.setEnabled(false);
                ElementTypeCmb.setEnabled(false);
                ElementValueTxt.setEnabled(false);
                ElementActionCmb.setEnabled(false);
                MenuRefTxt.setEnabled(false);
                WSRefTxt.setEnabled(false);
                FieldRefTxt.setEnabled(false);
                ElementMsgTxt.setEnabled(false);
                ElementResultTxt.setEnabled(false);
                SequenceTxt.setEnabled(false);    
                
                RecordIdTxt.setText("");
                ProjCodeTxt.setText(MainGUI.getProjectCode());
                ProjDescTxt.setText(MainGUI.getProjectDesc());
                
                //MenuCodeTxt.setEnabled(false);
                ModuleTxt.setText("");
                FieldIdTxt.setText("");
                FieldNameTxt.setText("");
                ElementIdTxt.setText("");
                ElementXpathTxt.setText("");
                LinkValueTxt.setText("");
                UrlTxt.setText("");
                TitleTxt.setText("");
                //ElementTypeLst.setEnabled(false);
                //ElementActionLst.setEnabled(false);
                MenuRefTxt.setText("");
                WSRefTxt.setText("");
                FieldRefTxt.setText("");
                ElementMsgTxt.setText("");
                ElementResultTxt.setText("");
                SequenceTxt.setText("");
                
                NewBtn.setEnabled(true);
                DeleteBtn.setEnabled(false);
                ChangeBtn.setEnabled(false);
                SaveBtn.setEnabled(false);
                CancelBtn.setEnabled(false);
                
    }
    
    public void NewMode(){
        RecordIdTxt.setEnabled(false);
        ProjCodeTxt.setEnabled(false);
        ProjDescTxt.setEnabled(false);
        //MenuCodeTxt.setEnabled(false);
        FunctionCodeCmb.setEnabled(true);
        //ModuleTxt
        ModuleTxt.setEnabled(true);
        FieldIdTxt.setEnabled(true);
        FieldNameTxt.setEnabled(true);
        ElementIdTxt.setEnabled(true);
        ElementXpathTxt.setEnabled(true);
        LinkValueTxt.setEnabled(true);
        UrlTxt.setEnabled(true);
        TitleTxt.setEnabled(true);
        ElementTypeCmb.setEnabled(true);
        ElementValueTxt.setEnabled(true);
        ElementActionCmb.setEnabled(true);
        MenuRefTxt.setEnabled(true);
        WSRefTxt.setEnabled(true);
        FieldRefTxt.setEnabled(true);
        ElementMsgTxt.setEnabled(true);
        ElementResultTxt.setEnabled(true);
        SequenceTxt.setEnabled(true);    

        NewBtn.setEnabled(false);
        DeleteBtn.setEnabled(false);
        ChangeBtn.setEnabled(false);
        SaveBtn.setEnabled(true);
        CancelBtn.setEnabled(true);        
    }
    
    public void NewModeValues(){
                //ModuleTxt.setText("null");
                FieldIdTxt.setText("null");
                FieldNameTxt.setText("null");
                ElementIdTxt.setText("null");
                ElementXpathTxt.setText("null");
                LinkValueTxt.setText("null");
                UrlTxt.setText("null");
                TitleTxt.setText("null");
                ElementTypeCmb.setEnabled(true);
                ElementValueTxt.setText("null");
                ElementActionCmb.setEnabled(true);
                MenuRefTxt.setText("null");
                WSRefTxt.setText("null");
                FieldRefTxt.setText("null");
                ElementMsgTxt.setText("null");
                ElementResultTxt.setText("null");
                SequenceTxt.setText("null"); 
    }
    
    public void ChangeMode(){
                RecordIdTxt.setEnabled(false);
                ProjCodeTxt.setEnabled(false);
                ProjDescTxt.setEnabled(false);
                //MenuCodeTxt.setEnabled(false);
                //FunctionCodeCmb.setEnabled(true);
                ModuleTxt.setEnabled(false);
                FieldIdTxt.setEnabled(false);
                FieldNameTxt.setEnabled(false);
                ElementIdTxt.setEnabled(false);
                ElementXpathTxt.setEnabled(false);
                LinkValueTxt.setEnabled(false);
                UrlTxt.setEnabled(false);
                TitleTxt.setEnabled(false);
                ElementTypeCmb.setEnabled(false);
                ElementValueTxt.setEnabled(false);
                ElementActionCmb.setEnabled(false);
                MenuRefTxt.setEnabled(false);
                WSRefTxt.setEnabled(false);
                FieldRefTxt.setEnabled(false);
                ElementMsgTxt.setEnabled(false);
                ElementResultTxt.setEnabled(false);
                SequenceTxt.setEnabled(false);    
                
                NewBtn.setEnabled(false);
                DeleteBtn.setEnabled(true);
                ChangeBtn.setEnabled(true);
                SaveBtn.setEnabled(false);
                CancelBtn.setEnabled(true);             
    }
    
    public void SaveMode(){
                RecordIdTxt.setEnabled(false);
                ProjCodeTxt.setEnabled(false);
                ProjDescTxt.setEnabled(false);
                //MenuCodeTxt.setEnabled(false);
                FunctionCodeCmb.setEnabled(true);
                ModuleTxt.setEnabled(false);
                FieldIdTxt.setEnabled(true);
                FieldNameTxt.setEnabled(true);
                ElementIdTxt.setEnabled(true);
                ElementXpathTxt.setEnabled(true);
                LinkValueTxt.setEnabled(true);
                UrlTxt.setEnabled(true);
                TitleTxt.setEnabled(true);
                ElementTypeCmb.setEnabled(true);
                ElementValueTxt.setEnabled(true);
                ElementActionCmb.setEnabled(true);
                MenuRefTxt.setEnabled(true);
                WSRefTxt.setEnabled(true);
                FieldRefTxt.setEnabled(true);
                ElementMsgTxt.setEnabled(true);
                ElementResultTxt.setEnabled(true);
                SequenceTxt.setEnabled(true);    
                
                NewBtn.setEnabled(false);
                DeleteBtn.setEnabled(false);
                ChangeBtn.setEnabled(false);
                SaveBtn.setEnabled(true);
                CancelBtn.setEnabled(true);               
    }
    
    public void loadTestScriptByFuncCode(String funccode){
        JFrame jFrame = new JFrame();
        try{
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                CallableStatement cStmt = conn.prepareCall("{call Search_PageTestScript_ByProjCodeFuncCode(?,?)}");
                String projcode = ProjCodeTxt.getText();
                //String funccode = FunctionCodeLst.getSelectedValue();
                cStmt.setNString(1, projcode);
                cStmt.setNString(2, funccode);
                
                ResultSet rs = cStmt.executeQuery();
                /*
                [ID] = PT.ID,
                [PROJCODE] = PT.PROJ_CODE,
                [MENUCODE] = PT.MENU_CODE,
                [MODULE] = PT.PAGE_MODULE,
                [FIELDID] = PT.PAGE_FIELDID,
                [FIELDNAME] = PT.PAGE_FIELDNAME,
                [ELEMID] = PT.ELEMENT_ID,
                [ELEMXPATH] = PT.ELEMENT_XPATH,
                [LINKVALUE] = PT.LINK_VALUE,
                [URL] = PT.PAGE_URL,
                [TITLE] = PT.PAGE_TITLE,
                [ELEMTYPE] = PT.ELEMENT_TYPE,
                [ELEMVALUE] = PT.ELEMENT_VALUE,
                [ELEMACTION] = PT.ELEMENT_ACTION,
                [MENUREF] = PT.MENU_REFERENCE,
                [WORKREF] = PT.WORKSHEET_REFERENCE,
                [FIELDREF] = PT.FIELD_REFERENCE,
                [ELEMMSG] = PT.ELEMENT_MESSAGE,
                [ELEMRESULT] = PT.ELEMENT_RESULT,
                [SEQ] = PT.SEQUENCE                 
                */
                String id = "";
                String menucode = "";
                String module = "";
                String fieldid = "";
                String fieldname = "";
                String elemid = "";
                String elemxpath = "";
                String linkvalue = "";
                String url = "";
                String title = "";
                String elemtype = "";
                String elemvalue = "";
                String elemaction = "";
                String menuref = "";
                String workref = "";
                String fieldref = "";
                String elemmsg = "";
                String elemresult = "";
                String seq = "";

                
                TestScriptTbl.setModel(new DefaultTableModel(null, new String[] {"ID","MENU CODE","MODULE","FIELD ID","FIELD NAME","ELEM ID","ELEM XPATH","LINK VALUE","URL","TITLE","ELEM TYPE","ELEM VALUE","ELEM ACTION","MENU REF","WORK REF","FIELD REF","ELEM MSG","ELEM RESULT","SEQ"}));
                while(rs.next()){
                        id = new String(NumberToTextConverter.toText(rs.getInt("ID")));
                        menucode = new String(rs.getNString("MENUCODE"));
                        module = new String(rs.getNString("MODULE"));
                        fieldid = new String(rs.getNString("FIELDID"));
                        fieldname = new String(rs.getNString("FIELDNAME"));
                        elemid = new String(rs.getNString("ELEMID"));
                        elemxpath = new String(rs.getNString("ELEMXPATH"));
                        linkvalue = new String(rs.getNString("LINKVALUE"));
                        url = new String(rs.getNString("URL"));
                        title = new String(rs.getNString("TITLE"));
                        elemtype = new String(rs.getNString("ELEMTYPE"));
                        elemvalue = new String(rs.getNString("ELEMVALUE"));
                        elemaction = new String(rs.getNString("ELEMACTION"));
                        menuref = new String(rs.getNString("MENUREF"));
                        workref = new String(rs.getNString("WORKREF"));
                        fieldref = new String(rs.getNString("FIELDREF"));
                        elemmsg = new String(rs.getNString("ELEMMSG"));
                        elemresult = new String(rs.getNString("ELEMRESULT"));
                        seq = new String(NumberToTextConverter.toText(rs.getInt("SEQ")));

                        String[] tblData = {id, menucode, module, fieldid, fieldname, elemid, elemxpath, linkvalue, url, title, elemtype, elemvalue, elemaction, menuref, workref, fieldref, elemmsg, elemresult, seq};
                        DefaultTableModel tblModel = (DefaultTableModel)TestScriptTbl.getModel();
                        tblModel.addRow(tblData);

                }

                TestScriptTbl.getColumnModel().getColumn(0).setPreferredWidth(35); //Record ID
                TestScriptTbl.getColumnModel().getColumn(3).setPreferredWidth(145); //Field ID
                TestScriptTbl.getColumnModel().getColumn(4).setPreferredWidth(145); //Field Name
                TestScriptTbl.getColumnModel().getColumn(5).setPreferredWidth(145); //Element ID
                TestScriptTbl.getColumnModel().getColumn(6).setPreferredWidth(145); //Element Xpath
                
                TestScriptTbl.getColumnModel().getColumn(1).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(1).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(2).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(2).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(13).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(13).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(14).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(14).setMaxWidth(0);
                TestScriptTbl.getColumnModel().getColumn(16).setMinWidth(0);
                TestScriptTbl.getColumnModel().getColumn(16).setMaxWidth(0);
                
                DefaultSettings();       
                ModuleTxt.setText(module);
                cStmt.close();
                conn.close();
                
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                 JOptionPane.showMessageDialog(jFrame,  "Test Script - Function List loading failed " + 
                               "\n" + errMessage, "Test Script - Maintenance", 0);                    
        }
    }
    
    public void loadFunctionCodeCmb(){
        //FunctionCodeCmb
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cStmt = conn.prepareCall("{call Search_ProjectFunction_ByProjectCode(?)}");
            
            String projcode = ProjCodeTxt.getText();
            cStmt.setNString(1, projcode);
            
            ResultSet rs = cStmt.executeQuery();
            //DefaultListModel listModel = new DefaultListModel();
            //String[] arrList = null;
            //FunctionCodeCmb.removeAllItems();
            while(rs.next()){
                /*
                [ID] = ID,
                [PCODE] = PROJECT_CODE,
                [FCODE] = FUNCTION_CODE,
                [FNAME] = FUNCTION_NAME                
                */
                String funccode = rs.getNString("FCODE");
                FunctionCodeCmb.addItem(funccode);

            }
            cStmt.close();
            conn.close();
            
            //FunctionCodeCmb.addActionListener((ActionListener) this);
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                 JOptionPane.showMessageDialog(jFrame,  "Test Script - Function List loading failed " + 
                               "\n" + errMessage, "Test Script - Maintenance", 0);                    
        }
        
    }
    
    public void InitializeTestScriptScroll(){
        setLayout(new BorderLayout());
        setPreferredSize(new Dimension(1047, 324));
        
        //TestScriptTbl table = new TestScriptTbl(20, 20);
        TestScriptTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //JScrollPane pane = new JScrollPane(TestScriptTbl);
        //add(pane, BorderLayout.CENTER);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton CancelBtn;
    private javax.swing.JButton ChangeBtn;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JComboBox<String> ElementActionCmb;
    private javax.swing.JTextField ElementIdTxt;
    private javax.swing.JTextField ElementMsgTxt;
    private javax.swing.JTextField ElementResultTxt;
    private javax.swing.JComboBox<String> ElementTypeCmb;
    private javax.swing.JTextField ElementValueTxt;
    private javax.swing.JTextField ElementXpathTxt;
    private javax.swing.JTextField FieldIdTxt;
    private javax.swing.JTextField FieldNameTxt;
    private javax.swing.JTextField FieldRefTxt;
    private javax.swing.JComboBox<String> FunctionCodeCmb;
    private javax.swing.JTextField LinkValueTxt;
    private javax.swing.JTextField MenuRefTxt;
    private javax.swing.JTextField ModuleTxt;
    private javax.swing.JButton NewBtn;
    private javax.swing.JTextField ProjCodeTxt;
    private javax.swing.JTextField ProjDescTxt;
    private javax.swing.JTextField RecordIdTxt;
    private javax.swing.JButton SaveBtn;
    private javax.swing.JTextField SequenceTxt;
    private javax.swing.JTable TestScriptTbl;
    private javax.swing.JTextField TitleTxt;
    private javax.swing.JTextField UrlTxt;
    private javax.swing.JTextField WSRefTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
