/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ewb.qa.tdd.GUI;

import ewb.qa.tdd.SQLObj;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.JTable;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import java.awt.*;
import java.awt.event.*;
import org.apache.poi.ss.util.NumberToTextConverter;
import ewb.qa.tdd.GUI.MainGUI.*;
import ewb.qa.tdd.SeleniumObj;
import javax.swing.table.TableColumnModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.*;

import org.apache.commons.io.FileUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.chrome.ChromeDriver;

/**
 *
 * @author JPE61800
 */
public class TestLog extends javax.swing.JFrame {

    /**
     * Creates new form TestLog
     */
    public TestLog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ExecutionLogTbl = new javax.swing.JTable();
        BackBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ProjCodeTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TestCaseIdCmb = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Test Log");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ExecutionLogTbl = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        ExecutionLogTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(ExecutionLogTbl);

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Project Code :");

        ProjCodeTxt.setText("jTextField1");

        jLabel3.setText("Test Case ID :");

        TestCaseIdCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        TestCaseIdCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestCaseIdCmbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1011, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ProjCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestCaseIdCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ProjCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(TestCaseIdCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BackBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        String globalProjCode = MainGUI.getProjectCode();
        String globalLoginId = LoginGUI.getLoginId();
        ProjCodeTxt.setText(globalProjCode);
        
        loadTestCaseIdCmb(globalProjCode, globalLoginId);
        display();
        
    }//GEN-LAST:event_formWindowOpened

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        ExecutePage execPage = new ExecutePage();
        execPage.setVisible(true);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void TestCaseIdCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestCaseIdCmbActionPerformed
        // TODO add your handling code here:
        String ProjCode = ProjCodeTxt.getText();
        String LoginId = LoginGUI.getLoginId();
        String TestCaseId = TestCaseIdCmb.getSelectedItem().toString();
        loadTestLog_ByProjCodeUserIdTestCaseId(ProjCode, LoginId, TestCaseId);
    }//GEN-LAST:event_TestCaseIdCmbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestLog().setVisible(true);
            }
        });
    }

    public void loadTestLog_ByProjCodeUserId(String givenProjCode, String givenUserId){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_AllExecuteLog(?,?)}");
            
            /*
            1-USER_CODE,
            2-MENU_CODE,
            3-PAGE_MODULE,
            4-PAGE_FIELD,
            5-ELEMENT_ID,
            6-ELEMENT_XPATH,
            7-ELEMENT_TYPE,
            8-ELEMENT_VALUE,
            9-ELEMENT_ACTION,
            10-ELEMENT_RESULT,
            11-ERR_MESSAGE            
            */
            ResultSet rs = cs.executeQuery();
            ExecutionLogTbl.setModel(new DefaultTableModel(null, new String[] {"User Code", "Function Code", "Module", "Field", "Element ID", "Element Xpath", "Type", "Value", "Action", "Result", "Error Message"}));
            while(rs.next()){
                String UserCode = rs.getNString(1);
                String FunctionCode = rs.getNString(2);
                String Module = rs.getNString(3);
                String Field = rs.getNString(4);
                String ElemId = rs.getNString(5);
                String ElemXpath = rs.getNString(6);
                String ElemType = rs.getNString(7);
                String ElemValue = rs.getNString(8);
                String ElemAction = rs.getNString(9);
                String ElemResult = rs.getNString(10);
                String ErrMessage = rs.getNString(11);
                
                String[] arrlist = {UserCode, FunctionCode, Module, Field, ElemId, ElemXpath, ElemType, ElemValue, ElemAction, ElemResult, ErrMessage};
                DefaultTableModel tblmodel = (DefaultTableModel)ExecutionLogTbl.getModel();
                tblmodel.addRow(arrlist);
                
            }
            rs.close();
            cs.close();
            conn.close();
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Execute log Failed " + 
                               "\n" + errMessage, "Execution Log Viewer", 0);             
        }
    }
    
    public void loadTestLog_ByProjCodeUserIdTestCaseId(String givenProjCode, String givenLoginId, String givenTestCaseId){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ExecutionLog_ByProjCodeTestCaseIdLoginId(?,?,?)}");
            /*
            @proj_code NVARCHAR(20),
            @testcaseid  NVARCHAR(12),
            @loginid NVARCHAR(20)
            */
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setNString(3, givenLoginId);
            
            ResultSet rs = cs.executeQuery();
            ExecutionLogTbl.setModel(new DefaultTableModel(null, new String[] {"User Code", "Function Code", "Module", "Field", "Element ID", "Element Xpath", "Type", "Value", "Action", "Result", "Error Message"}));
            while(rs.next()){
                /*
                1-USER_CODE,
                2-MENU_CODE,
                3-PAGE_MODULE,
                4-PAGE_FIELD,
                5-ELEMENT_ID,
                6-ELEMENT_XPATH,
                7-ELEMENT_TYPE,
                8-ELEMENT_VALUE,
                9-ELEMENT_ACTION,
                10-ELEMENT_RESULT,
                11-ERR_MESSAGE                
                */
                
                String UserCode = rs.getNString(1);
                String FunctionCode = rs.getNString(2);
                String Module = rs.getNString(3);
                String Field = rs.getNString(4);
                String ElemId = rs.getNString(5);
                String ElemXpath = rs.getNString(6);
                String ElemType = rs.getNString(7);
                String ElemValue = rs.getNString(8);
                String ElemAction = rs.getNString(9);
                String ElemResult = rs.getNString(10);
                String ErrMessage = rs.getString(11);
                
                String[] arrlist = {UserCode, FunctionCode, Module, Field, ElemId, ElemXpath, ElemType, ElemValue, ElemAction, ElemResult, ErrMessage};
                DefaultTableModel tblmodel = (DefaultTableModel)ExecutionLogTbl.getModel();
                tblmodel.addRow(arrlist);
                
            }
            rs.close();
            cs.close();
            conn.close();
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Execute log Failed " + 
                               "\n" + errMessage, "Execution Log Viewer", 0);                    
        }
    }
    
    private void loadTestCaseIdCmb(String givenProjCode, String givenUserId){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_AllTestCases_ByProjCodeUserID(?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenUserId);
            
            DefaultComboBoxModel cmbmodel = new DefaultComboBoxModel();
            TestCaseIdCmb.setModel(cmbmodel);
            
            ResultSet rs = cs.executeQuery();
            while(rs.next()){
                /*
                1-[ID] = TC.ID,
                2-[TCID] = TC.TESTCASEID,
                3-[TCDESC] = TC.TESTCASEDESCRIPTION,
                4-[ITERATION] = TC.ITERATION,
                5-[EXECUTE] = TC.EXECUTEFLAG,
                6-[RESULT] = TC.RESULTFLAG,
                7-[TESTCYCLE] = TC.TEST_CYCLE,
                8-[TESTRUN] = TC.TEST_RUN,
                9-[REMARKS] = TC.REMARKS,
                10-[RCA] = TC.RCA,
                11-[USERID] = TC.USER_ID                
                */
                TestCaseIdCmb.addItem(rs.getNString(2));
            }
            rs.close();
            cs.close();
            conn.close();
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Execute log Failed " + 
                               "\n" + errMessage, "Execution Log Viewer", 0);                     
        }
    }
    
        private void display(){
        //JFrame f = new JFrame("TestScript");
        //TestScript f = new TestScript();
        //f.setExtendedState(JFrame.MAXIMIZED_BOTH);
        //f.setVisible(true);
        if(this.getExtendedState() != TestScript.MAXIMIZED_BOTH){
            this.setExtendedState(TestScript.MAXIMIZED_BOTH);
        }
        else{
            this.setExtendedState(TestScript.NORMAL);
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn;
    private javax.swing.JTable ExecutionLogTbl;
    private javax.swing.JTextField ProjCodeTxt;
    private javax.swing.JComboBox<String> TestCaseIdCmb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
