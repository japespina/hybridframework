/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ewb.qa.tdd.GUI;

import ewb.qa.tdd.ExcelObj;
import ewb.qa.tdd.SQLObj;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.JTable;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import java.awt.*;
import java.awt.event.*;
import org.apache.poi.ss.util.NumberToTextConverter;
import ewb.qa.tdd.GUI.MainGUI.*;
import ewb.qa.tdd.SeleniumObj;
import javax.swing.table.TableColumnModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.*;

import org.apache.commons.io.FileUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.chrome.ChromeDriver;

/**
 *
 * @author JPE61800
 */
public class ExecutePage extends javax.swing.JFrame {
    public WebDriver driver;
    public int statusmode = 0;
    
    public int recordflag = 0; //Default 0-New Record 1-Existing Record
    /**
     * Creates new form ExecutePage
     */
    public ExecutePage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        ProjCodeTxt = new javax.swing.JTextField();
        ProjDescTxt = new javax.swing.JTextField();
        TestCaseIdTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TestCaseDescTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        ExecYesRBtn = new javax.swing.JRadioButton();
        ExecNoRBtn = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        CycleNumTxt = new javax.swing.JTextField();
        RunNumTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CancelBtn = new javax.swing.JButton();
        ChangeBtn = new javax.swing.JButton();
        SaveBtn = new javax.swing.JButton();
        AddBtn = new javax.swing.JButton();
        ExecuteTestBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        IterYesRBtn = new javax.swing.JRadioButton();
        IterNoRBtn = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TesterTestCaseTbl = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        UploadBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        TestResultTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        RemarksTxt = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        RCATxt = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TestScriptBtn = new javax.swing.JButton();
        AppDataSourceBtn = new javax.swing.JButton();
        TestDataBtn = new javax.swing.JButton();
        ForceStopBtn = new javax.swing.JButton();
        MenuTestScriptBtn = new javax.swing.JButton();
        RecordIdTxt = new javax.swing.JTextField();
        ExecutionLogBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        DeclaredTestCaseTbl = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Execute Test Dashboard");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Project :");

        jLabel2.setText("Test Case ID :");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ExecYesRBtn.setText("Yes");
        ExecYesRBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExecYesRBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ExecYesRBtnMousePressed(evt);
            }
        });

        ExecNoRBtn.setText("No");
        ExecNoRBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExecNoRBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ExecNoRBtnMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ExecYesRBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ExecNoRBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(ExecYesRBtn)
                .addComponent(ExecNoRBtn))
        );

        jLabel3.setText("Execute :");

        jLabel4.setText("Cycle :");

        jLabel5.setText("Test Run :");

        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        ChangeBtn.setText("Change");
        ChangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeBtnActionPerformed(evt);
            }
        });

        SaveBtn.setText("Save");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        AddBtn.setText("Add");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        ExecuteTestBtn.setText("Execute Test");
        ExecuteTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteTestBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        IterYesRBtn.setText("Yes");
        IterYesRBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IterYesRBtnMousePressed(evt);
            }
        });

        IterNoRBtn.setText("No");
        IterNoRBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IterNoRBtnMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IterYesRBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(IterNoRBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IterYesRBtn)
                    .addComponent(IterNoRBtn)))
        );

        TesterTestCaseTbl = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        TesterTestCaseTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Case ID", "Test Case Description", "Iteration", "Execute", "Result", "Cycle", "Run"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TesterTestCaseTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TesterTestCaseTblMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(TesterTestCaseTbl);
        if (TesterTestCaseTbl.getColumnModel().getColumnCount() > 0) {
            TesterTestCaseTbl.getColumnModel().getColumn(0).setResizable(false);
            TesterTestCaseTbl.getColumnModel().getColumn(1).setResizable(false);
            TesterTestCaseTbl.getColumnModel().getColumn(2).setResizable(false);
            TesterTestCaseTbl.getColumnModel().getColumn(3).setResizable(false);
            TesterTestCaseTbl.getColumnModel().getColumn(4).setResizable(false);
            TesterTestCaseTbl.getColumnModel().getColumn(5).setResizable(false);
            TesterTestCaseTbl.getColumnModel().getColumn(6).setResizable(false);
        }

        jLabel6.setText("Iteration :");

        UploadBtn.setText("Upload");
        UploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Result :");

        RemarksTxt.setColumns(20);
        RemarksTxt.setRows(5);
        RemarksTxt.setPreferredSize(new java.awt.Dimension(164, 95));
        jScrollPane2.setViewportView(RemarksTxt);

        RCATxt.setColumns(20);
        RCATxt.setRows(5);
        RCATxt.setPreferredSize(new java.awt.Dimension(164, 95));
        jScrollPane3.setViewportView(RCATxt);

        jLabel8.setText("Remarks :");

        jLabel9.setText("RCA :");

        TestScriptBtn.setText("Test Script");
        TestScriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestScriptBtnActionPerformed(evt);
            }
        });

        AppDataSourceBtn.setText("App Data Source");
        AppDataSourceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppDataSourceBtnActionPerformed(evt);
            }
        });

        TestDataBtn.setText("Test Data");
        TestDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestDataBtnActionPerformed(evt);
            }
        });

        ForceStopBtn.setText("Force Stop Testing");
        ForceStopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForceStopBtnActionPerformed(evt);
            }
        });

        MenuTestScriptBtn.setText("Menu Test Script");
        MenuTestScriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuTestScriptBtnActionPerformed(evt);
            }
        });

        ExecutionLogBtn.setText("View Execution Log");
        ExecutionLogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecutionLogBtnActionPerformed(evt);
            }
        });

        DeclaredTestCaseTbl = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        DeclaredTestCaseTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(DeclaredTestCaseTbl);

        jLabel10.setText("Tester - Test Case List");

        jLabel11.setText("Master - Test Case List");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TestCaseIdTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(ProjCodeTxt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TestCaseDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ProjDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RecordIdTxt))))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CycleNumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RunNumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(TestResultTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 306, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ForceStopBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ExecutionLogBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TestDataBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MenuTestScriptBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TestScriptBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AppDataSourceBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ExecuteTestBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UploadBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BackBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ChangeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProjCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProjDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RecordIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UploadBtn))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TestCaseIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(TestCaseDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CycleNumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(RunNumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(TestResultTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(ExecuteTestBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AppDataSourceBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestScriptBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MenuTestScriptBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestDataBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ExecutionLogBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ForceStopBtn)))
                .addGap(11, 11, 11)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CancelBtn)
                        .addComponent(SaveBtn)
                        .addComponent(ChangeBtn)
                        .addComponent(AddBtn))
                    .addComponent(BackBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        this.setVisible(false);
        MainGUI mainform = new MainGUI();
        mainform.setVisible(true);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void UploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadBtnActionPerformed
            JFrame jFrame = new JFrame();
            try{
                    String filename = "";
                    //FileInputStream fis = new FileInputStream(filename);
                    String msgInput = JOptionPane.showInputDialog(jFrame, "Input source file path : ", "TDD - Test Case Upload", JOptionPane.INFORMATION_MESSAGE);
                    JOptionPane.showMessageDialog(jFrame, "Source file path - " + msgInput, "TDD - Test Case Upload", JOptionPane.INFORMATION_MESSAGE);
                    filename = msgInput;
                    FileInputStream fis = new FileInputStream(filename);
                    XSSFWorkbook workbook = new XSSFWorkbook(fis);
                    XSSFSheet worksheet = workbook.getSheet("TestCases");
                    XSSFCell cellObj = null;
                    int LastRow = worksheet.getLastRowNum();
                    
                    try{
                            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                            CallableStatement cStmt = null;
                            int execFlag = 0;
                            
                            for(int iRow = 3; iRow <= LastRow; iRow++){
                                    cStmt = conn.prepareCall("{call Insert_TestCases(?,?,?,?,?,?,?,?)}");
                            
                                    int LastCell = worksheet.getRow(iRow).getLastCellNum() -1;
                                    String conCatValue = "";
                                    //int iRow = 0;
                                    int paramindex = 2;
                                    String globalProjCode = MainGUI.getProjectCode();
                                    cStmt.setNString(1,globalProjCode);
                                    conCatValue = "1" + "|" + "STRING" + "-" + globalProjCode + "\n";
                                    
                                    for(int iCell = 0; iCell <= LastCell; iCell++){
                                            String cellStringValue = "";
                                            int cellIntValue = 0;
                                            //paramindex++;
                                            String cellValue = "";
                                            cellObj = worksheet.getRow(iRow).getCell(iCell);
                                            if(cellObj == null)
                                            {
                                                    //cellValue = null;
                                                    cellStringValue = "null";
                                                    cStmt.setString(paramindex, cellStringValue);
                                                    conCatValue = conCatValue + paramindex + "|" + "STRING" + "-" + cellStringValue + "\n";
                                            }
                                            else
                                            {
                                                    switch(cellObj.getCellType())
                                                    {
                                                    case STRING:
                                                            //cellValue = cellObj.getStringCellValue();
                                                            cellStringValue = cellObj.getStringCellValue();
                                                            cStmt.setString(paramindex, cellStringValue);
                                                            conCatValue = conCatValue + paramindex + "|" + "STRING" + "-" + cellStringValue + "\n";
                                                            break;

                                                    case NUMERIC:
                                                            //cellValue = NumberToTextConverter.toText(cellObj.getNumericCellValue());
                                                            cellIntValue = Integer.parseInt(NumberToTextConverter.toText(cellObj.getNumericCellValue()));
                                                            cStmt.setInt(paramindex, cellIntValue);
                                                            conCatValue = conCatValue + paramindex + "|" + "INT" + "-" + cellIntValue + "\n";

                                                            break;

                                                    case BLANK:
                                                            //cellValue = null;
                                                            cellStringValue = "null";
                                                            cStmt.setString(paramindex, cellStringValue);
                                                            conCatValue = conCatValue + paramindex + "|" + "STRING" + "-" + cellStringValue + "\n";
                                                            break;

                                                    case ERROR:
                                                            cellStringValue = "null";
                                                            cStmt.setString(paramindex, cellStringValue);
                                                            conCatValue = conCatValue + paramindex + "|" + "STRING" + "-" + cellStringValue + "\n";
                                                            break;
                                                    }
                                            }
                                            paramindex++;
                                    }
                                    
                                    System.out.println(conCatValue);
                                    execFlag = cStmt.executeUpdate();
                                    cStmt.close();
                            }
                            
                            if(execFlag < 0){
                                        JOptionPane.showMessageDialog(jFrame, "Record has been successfully saved", "Run Test - Upload Excel", JOptionPane.INFORMATION_MESSAGE);
                                        conn.commit();
                                        //cStmt.close();
                                        conn.close();
                                        loadTesterTestCaseTbl_TestCase();
                             }
                    }
                    catch(Exception ex){
                            String errMessage = null;

                           errMessage = "Error Message: " + ex.getMessage() + 
                              "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                              "\n" + "Stack Trace: " + ex.getStackTrace() + 
                              "\n" + "Cause: " + ex.getCause();

                           System.out.println(errMessage);

                           JOptionPane.showMessageDialog(jFrame,  "Saving Failed " + 
                                          "\n" + errMessage, "Maintenance", 0);
                    }

            }
            catch(Exception ex){
                    String errMessage = null;

                    errMessage = "Error Message: " + ex.getMessage() + 
                       "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                       "\n" + "Stack Trace: " + ex.getStackTrace() + 
                       "\n" + "Cause: " + ex.getCause();

                    System.out.println(errMessage);

                    JOptionPane.showMessageDialog(jFrame,  "Saving Failed " + 
                                   "\n" + errMessage, "Maintenance", 0);
            }
    }//GEN-LAST:event_UploadBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
            ProjCodeTxt.setText(MainGUI.getProjectCode());
            ProjDescTxt.setText(MainGUI.getProjectDesc());
            
            String ProjCode = ProjCodeTxt.getText();
            defaultset();
            loadTesterTestCaseTbl_TestCase();
            loadDeclaredTestCaseTbl_TestCase(ProjCode);
    }//GEN-LAST:event_formWindowOpened

    private void ExecYesRBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExecYesRBtnMouseClicked

            //ExecNoRBtn.setSelected(false);
        
    }//GEN-LAST:event_ExecYesRBtnMouseClicked

    private void ExecNoRBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExecNoRBtnMouseClicked
            //ExecYesRBtn.setSelected(false);
            
    }//GEN-LAST:event_ExecNoRBtnMouseClicked

    private void IterYesRBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IterYesRBtnMousePressed
            IterNoRBtn.setSelected(false);
            
    }//GEN-LAST:event_IterYesRBtnMousePressed

    private void IterNoRBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IterNoRBtnMousePressed
            IterYesRBtn.setSelected(false);
            
    }//GEN-LAST:event_IterNoRBtnMousePressed

    private void ExecYesRBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExecYesRBtnMousePressed
            ExecNoRBtn.setSelected(false);
            
    }//GEN-LAST:event_ExecYesRBtnMousePressed

    private void ExecNoRBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExecNoRBtnMousePressed
            ExecYesRBtn.setSelected(false);
            
    }//GEN-LAST:event_ExecNoRBtnMousePressed

    private void TesterTestCaseTblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TesterTestCaseTblMousePressed
            JFrame jFrame = new JFrame();
            if(evt.getClickCount() == 2){
                    TableModel tblmodel = TesterTestCaseTbl.getModel();
                    int index = TesterTestCaseTbl.getSelectedRow();
                    //{"Test Case ID", "Test Case Description", "Iteration", "Execute", "Result", "Test Cycle", "Test Run", "Remarks", "RCA"}
                    String recid = tblmodel.getValueAt(index,0).toString();
                    String tcid = tblmodel.getValueAt(index, 1).toString();
                    String tcdesc = tblmodel.getValueAt(index,2).toString();
                    String iteration = tblmodel.getValueAt(index, 3).toString();
                    String execute = tblmodel.getValueAt(index, 4).toString();
                    String result = tblmodel.getValueAt(index, 5).toString();
                    String cycle = tblmodel.getValueAt(index, 6).toString();
                    String run = tblmodel.getValueAt(index, 7).toString();
                    String remarks = tblmodel.getValueAt(index, 8).toString();
                    String rca = tblmodel.getValueAt(index, 9).toString();
                    
                    //String result = tblmodel
                    RecordIdTxt.setText(recid);
                    TestCaseIdTxt.setText(tcid);
                    TestCaseDescTxt.setText(tcdesc);
                    if(iteration.equalsIgnoreCase("Y")){
                        IterYesRBtn.setSelected(true);
                        IterNoRBtn.setSelected(false);
                    }
                    else{
                         IterYesRBtn.setSelected(false);
                        IterNoRBtn.setSelected(true);
                    }
                    
                    if(execute.equalsIgnoreCase("Y")){
                        ExecYesRBtn.setSelected(true);
                        ExecNoRBtn.setSelected(false);
                    }
                    else{
                        ExecYesRBtn.setSelected(false);
                        ExecNoRBtn.setSelected(true);
                    }
                    
                    CycleNumTxt.setText(cycle);
                    RunNumTxt.setText(run);
                    TestResultTxt.setText(result);
                    RemarksTxt.setText(remarks);
                    RCATxt.setText(rca);
                    
                    
                    ChangeMode();
            }
    }//GEN-LAST:event_TesterTestCaseTblMousePressed

    private void ChangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeBtnActionPerformed
            recordflag = 1;
            statusmode = 2;
            SaveMode();
            
    }//GEN-LAST:event_ChangeBtnActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
            recordflag = 0;
            statusmode = 1;
            //SaveMode();
            JFrame jFrame = new JFrame();
            int response = 0;
            int indexRow = 0;
            
            indexRow = DeclaredTestCaseTbl.getSelectedRow();
            if(indexRow > -1){
                DefaultTableModel tblmodel = (DefaultTableModel)DeclaredTestCaseTbl.getModel();
                //{"ID","Test Case ID", "Test Case Description", "Iteration", "Execute", "Result", "Test Cycle", "Test Run", "Remarks", "RCA", "Status"}
                int RecordId = Integer.parseInt(tblmodel.getValueAt(indexRow, 0).toString());
                String TestCaseId = tblmodel.getValueAt(indexRow, 1).toString();
                String TestCaseDesc = tblmodel.getValueAt(indexRow, 2).toString();
                String IterationFlag = tblmodel.getValueAt(indexRow,3).toString();
                String ExecuteFlag = tblmodel.getValueAt(indexRow, 4).toString();
                String ResultFlag = tblmodel.getValueAt(indexRow, 5).toString();
                int TestCycle = Integer.parseInt(tblmodel.getValueAt(indexRow, 6).toString());
                int TestRun = Integer.parseInt(tblmodel.getValueAt(indexRow, 7).toString());
                String Remarks = tblmodel.getValueAt(indexRow, 8).toString();
                String RCA = tblmodel.getValueAt(indexRow, 9).toString();
                String StatusCode = tblmodel.getValueAt(indexRow, 10).toString();
                
                String ProjCode = ProjCodeTxt.getText();
                String LoginId = LoginGUI.getLoginId();
                boolean existingrec = ValidateTestCaseId_ByUserId(ProjCode, TestCaseId, LoginId);
                if(existingrec == false){
                    response = JOptionPane.showConfirmDialog(jFrame, "Are you sure you want to add the following selected Test Case into your list?" + "\n" +
                            "Test Case ID :" + TestCaseId + "\n" + 
                            "Test Case Description :" + TestCaseDesc , "Test Execution Dashboard", JOptionPane.YES_NO_OPTION);
                    if(response == 0){
                        //InsertTestCaseForTester(String givenProjCode, String givenTestCaseId, String givenTestCaseDesc, String givenIterationFlag, String givenExecuteFlag,
                        //String givenResultFlag, int givenTestCycle, int givenTestRun, String givenRemarks, String givenRCA, String givenUserId)
                        boolean insertresult = InsertTestCaseForTester(ProjCode, TestCaseId, TestCaseDesc, IterationFlag, ExecuteFlag, ResultFlag, TestCycle, TestRun, Remarks, RCA, LoginId, StatusCode);
                        if(insertresult){
                            JOptionPane.showMessageDialog(jFrame, "Selected item has been successfully add into your Test Case List", "Test Execution - Dashboard", JOptionPane.INFORMATION_MESSAGE);
                            loadTesterTestCaseTbl_TestCase();
                        }
                    }                    
                }
                else{
                    String msg = "The selected Test Case ID : " + TestCaseId + " is already existing in your list of Tester's - Test Cases";
                    JOptionPane.showMessageDialog(jFrame, msg , "Execution - Dashboard",  JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(jFrame, "No selected item has been made to add in your Test Case list", "Test Execution - Dashboard", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_AddBtnActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
           JFrame jFrame = new JFrame();
           try{
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                //CallableStatement cStmt = conn.prepareCall("{call Search_TestCases_ByProjCodeTestCaseId (?,?,?)}");
                CallableStatement cStmt = conn.prepareCall("{call Search_TestCases_ByProjCodeTestCaseIdUserId(?,?,?,?)}");
                int execFlag = 0;

                int Id = 0;                
                if(RecordIdTxt.equals("0")){
                    Id = 0;
                }
                else{
                    Id = Integer.parseInt(RecordIdTxt.getText());
                }

                String pcode = ProjCodeTxt.getText();
                String tcid = TestCaseIdTxt.getText();
                String tcdesc = TestCaseDescTxt.getText();
                String iteration = "";
                String execute = "";
                String result = TestResultTxt.getText();

                if(IterYesRBtn.isSelected() == true){
                        iteration = "Y";
                }
                else if(IterNoRBtn.isSelected() == true){
                       iteration = "N";
                }
                
                if(ExecYesRBtn.isSelected() == true){
                        execute = "Y";
                }
                else if(ExecNoRBtn.isSelected() == true){
                        execute = "N";
                }
                
                int cycle = Integer.parseInt(CycleNumTxt.getText());
                int run = Integer.parseInt(RunNumTxt.getText());
                String remarks = RemarksTxt.getText();
                String rca = RCATxt.getText();
                String userid = LoginGUI.getLoginId().toUpperCase();
                /*
                @id int,
                @proj_code NVARCHAR(20),
                @testcaseid NVARCHAR(12),
                @test_cycle INT,
                @user_id NVARCHAR(8)                
                */
                
                cStmt.setInt(1, Id);
                cStmt.setNString(2, pcode);
                cStmt.setNString(3, tcid);
                //cStmt.setInt(4, cycle);
                cStmt.setNString(4, userid);
                
                ResultSet rs = cStmt.executeQuery();
                if(rs.next()){
                    /*
                    1-[PCODE] = TC.PROJ_CODE,
                    2-[TCID] = TC.TESTCASEID,
                    3-[TCDESC] = TC.TESTCASEDESCRIPTION,
                    4-[ITERATION] = TC.ITERATION,
                    5-[EXECUTE] = TC.EXECUTEFLAG,
                    6-[RESULT] = TC.RESULTFLAG,
                    7-[CYCLE] = TC.TEST_CYCLE,
                    8-[RUN] = TC.TEST_RUN                    
                    */
                    int TestCycle = rs.getInt(7);
                    if(TestCycle < cycle){
                        run = 0;
                        result = "null";
                    }
                    //Update Mode
                    cStmt.close();
                    Id =  Integer.parseInt(RecordIdTxt.getText());
                    cStmt = conn.prepareCall("{call Update_TestCases(?,?,?,?,?,?,?,?,?,?,?,?)}");
                    /*
                    1-@id INT,
                    2-@proj_code NVARCHAR(20),
                    3-@testcaseid NVARCHAR(12),
                    4-@testcasedescription NVARCHAR(100),
                    5-@iteration NVARCHAR(1),
                    6-@executeflag NVARCHAR(1),
                    7-@resultflag NVARCHAR(6),
                    8-@test_cycle INT,
                    9-@test_run INT,
                    10-@remarks TEXT,
                    11-@rca TEXT,
                    12-@user_id NVARCHAR(8)                    

                    UPDATE dbo.TESTCASES
                    SET
                            TESTCASEDESCRIPTION = @testcasedescription,
                            ITERATION = @iteration,
                            EXECUTEFLAG = @executeflag,
                            RESULTFLAG = @resultflag,
                            TEST_CYCLE = @test_cycle,
                            TEST_RUN = @test_run,
                            REMARKS = @remarks,
                            RCA = @rca
                    WHERE
                            ID = @id AND
                            PROJ_CODE = @proj_code AND
                            TESTCASEID = @testcaseid AND
                            USER_ID = @user_id
                    */
                    cStmt.setInt(1, Id);
                    cStmt.setNString(2, pcode);
                    cStmt.setNString(3, tcid);
                    cStmt.setNString(4, tcdesc);
                    cStmt.setNString(5, iteration);
                    cStmt.setNString(6, execute);
                    cStmt.setNString(7, result);
                    cStmt.setInt(8, cycle);
                    cStmt.setInt(9, run);
                    cStmt.setString(10, remarks);
                    cStmt.setString(11, rca);
                    cStmt.setString(12, userid);
                    
                    execFlag = cStmt.executeUpdate();
                    
                }
                else {
                    //Insert Mode
                    cStmt.close();
                    cStmt = conn.prepareCall("{call Insert_TestCases(?,?,?,?,?,?,?,?,?,?,?)}");
                    
                    cStmt.setNString(1, pcode);
                    cStmt.setNString(2, tcid);
                    cStmt.setNString(3, tcdesc);
                    cStmt.setNString(4, iteration);
                    cStmt.setNString(5, execute);
                    cStmt.setNString(6, result);
                    cStmt.setInt(7, cycle);
                    cStmt.setInt(8, run);
                    cStmt.setString(9, "null");
                    cStmt.setString(10, "null");
                    cStmt.setNString(11, userid);
                    
                    execFlag = cStmt.executeUpdate();
                    
                }
               
                 if(execFlag < 0){
                        JOptionPane.showMessageDialog(jFrame,  "Record Saving Successful ", "Test Run", JOptionPane.INFORMATION_MESSAGE);
                        conn.commit();
                        cStmt.close();
                        conn.close();
                        NewMode();               
                        loadTesterTestCaseTbl_TestCase();
                 }

           }
           catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Loading Project Apps Table Failed " + 
                               "\n" + errMessage, "Maintenance - Project Apps", 0);
           }
    }//GEN-LAST:event_SaveBtnActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
            NewMode();
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void ExecuteTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteTestBtnActionPerformed

        JFrame jFrame = new JFrame();
        try{
                ExcelObj.ClearArrTempStorage();
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                CallableStatement cStmt = conn.prepareCall("{call Search_TestCaseExecute_ByProjCodeUserId(?,?)}");
                String ProjCode = MainGUI.getProjectCode();
                String UserId = LoginGUI.getLoginId();
                
                cStmt.setNString(1, ProjCode);
                cStmt.setNString(2, UserId);
                
                ResultSet rs = cStmt.executeQuery();
                while(rs.next()){
                        /*
                        [ID] = TC.ID,
                        [PCODE] = TC.PROJ_CODE,
                        [TID] = TC.TESTCASEID,
                        [TDESC] = TC.TESTCASEDESCRIPTION,
                        [ITERATION] = TC.ITERATION,
                        [EXECUTE] = TC.EXECUTEFLAG,
                        [CYCLE] = TEST_CYCLE,
                        [RUN] = TEST_RUN                    
                        */
                        int id = rs.getInt("ID");
                        String projcode = rs.getNString("PCODE");
                        String testcaseid = rs.getNString("TID");
                        String testcasedesc = rs.getNString("TDESC");
                        String iterationflag = rs.getNString("ITERATION");
                        String executeflag = rs.getNString("EXECUTE");
                        int cycle = rs.getInt("CYCLE");
                        int run = rs.getInt("RUN");
                        
                        AccessBrowserUrl();
                        int iterationMax = AccessIterationTestCase(projcode, testcaseid, UserId);
                        
                        if(iterationMax == 0){
                            iterationMax = 1;
                        }
                        
                        if(cycle == 0){
                            cycle = 1;
                        }
                        run++;                        
                        
                        for(int iteration=1; iteration <= iterationMax; iteration++){
                                AccessTestScript(projcode, testcaseid, iteration, UserId, cycle, run);
                        }
                        //ewb.qa.tdd.SeleniumObj.CloseBrowser();
                        
                        
                        String resultflag = "";
                        //ValidateExecutionResult(String givenProjCode, String givenTestCaseId, String givenLoginId, int givenTestCycle, int givenTestRun){
                        resultflag = ValidateExecutionResult(projcode, testcaseid, UserId, cycle, run);
                        
                        //UpdateExecutedTestCaseId(int givenRecordId, String givenProjCode, String givenTestCaseId, String givenResultFlag, int givenTestCycle, int givenTestRun){
                        UpdateExecutedTestCaseId(id, projcode, testcaseid, resultflag, cycle, run);
                        
                        //Update dbo.TESTCASES by UserID
                        //get current cycle, run, resultflag
                        //validate and consolidate test result True - Passed, False - Failed
                        //increment run
                        loadTesterTestCaseTbl_TestCase();
                }
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Test Execution Failed " + 
                               "\n" + errMessage, "Test Execution", 0);
        }
            
    }//GEN-LAST:event_ExecuteTestBtnActionPerformed

    private void UpdateExecutedTestCaseId(int givenRecordId, String givenProjCode, String givenTestCaseId, String givenResultFlag, int givenTestCycle, int givenTestRun){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Update_TestCase_TestRunExcuteResult(?,?,?,?,?,?)}");
            /*
            @id INT,
            @proj_code NVARCHAR(20),
            @testcaseid NVARCHAR(12),
            @resultflag NVARCHAR(6),
            @test_cycle INT,
            @test_run INT            
            */
            
            cs.setInt(1, givenRecordId);
            cs.setNString(2, givenProjCode);
            cs.setNString(3, givenTestCaseId);
            cs.setNString(4, givenResultFlag);
            cs.setInt(5, givenTestCycle);
            cs.setInt(6, givenTestRun);
            
            int executeflag = cs.executeUpdate();
            if(executeflag < 0){
                String msg = "Test Case - " + givenTestCaseId + " execution completed";
                JOptionPane.showMessageDialog(jFrame, msg , "Test Execution", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Updating Test Execution Result failed " + 
                               "\n" + errMessage, "Test Execution", 0);            
        }
        
    }
    
    private static String ValidateExecutionResult(String givenProjCode, String givenTestCaseId, String givenLoginId, int givenTestCycle, int givenTestRun){
        JFrame jFrame = new JFrame();
        String result = "true";
        
        try{
            //Search_ValidateExecutionResult_Failed
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ValidateExecutionResult_Failed(?,?,?,?,?)}");
            /*
            @proj_code NVARCHAR(20),
            @testcaseid  NVARCHAR(12),
            @loginid NVARCHAR(20),
            @test_cycle INT,
            @test_run INT            
            */
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setNString(3, givenLoginId);
            cs.setInt(4, givenTestCycle);
            cs.setInt(5, givenTestRun);
            
            ResultSet rs = cs.executeQuery();
            while(rs.next()){
                result = rs.getNString(1);
            }
            if(result.equals("true")){
                result = "PASSED";
            }
            else{
                result = "FAILED";
            }
            return result;
        }
        catch(Exception ex){
                String errMessage = null;
                result = "FAILED";
                
                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Test Execution Result failed " + 
                               "\n" + errMessage, "Test Execution", 0);       
                
                
                return result;
        }
        
    }
    
    private void TestScriptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestScriptBtnActionPerformed
            setVisible(false);
            TestScript setframe = new TestScript();
            setframe.setVisible(true);
                
    }//GEN-LAST:event_TestScriptBtnActionPerformed

    private void TestDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestDataBtnActionPerformed
            setVisible(false);
            TestData setframe = new TestData();
            setframe.setVisible(true);
    }//GEN-LAST:event_TestDataBtnActionPerformed

    private void AppDataSourceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppDataSourceBtnActionPerformed
        // TODO add your handling code here:
            setVisible(false);
            AppDataSource setframe = new AppDataSource();
            setframe.setVisible(true);

    }//GEN-LAST:event_AppDataSourceBtnActionPerformed

    private void ForceStopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForceStopBtnActionPerformed
        // TODO add your handling code here:
        SeleniumObj.ForceStopSelenium();
    }//GEN-LAST:event_ForceStopBtnActionPerformed

    private void MenuTestScriptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuTestScriptBtnActionPerformed
        // TODO add your handling code here:
            setVisible(false);
            MenuTestScript setframe = new MenuTestScript();
            setframe.setVisible(true);
    }//GEN-LAST:event_MenuTestScriptBtnActionPerformed

    private void ExecutionLogBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecutionLogBtnActionPerformed
        // TODO add your handling code here:
            setVisible(false);
            TestLog setframe = new TestLog();
            setframe.setVisible(true);
    }//GEN-LAST:event_ExecutionLogBtnActionPerformed

    public void AccessBrowserUrl(){
            JFrame jFrame = new JFrame();
            try{
                    Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                    CallableStatement cStmt = conn.prepareCall("{call Search_ProjectLocation_ByProjCode(?)}");
                    String projcode = MainGUI.getProjectCode();
                    
                    cStmt.setNString(1,projcode);
                    ResultSet rs = cStmt.executeQuery();
                    if(rs.next()){
                            /*
                            [ID] = PL.ID,
                            [PCODE] = PL.PROJECT_CODE,
                            [ENV] = PL.ENVIRONMENT,
                            [APATH] = PL.APP_PATH,
                            [BROWSER] = PL.BROWSER
                            */
                            String id = NumberToTextConverter.toText(rs.getInt("ID"));
                            String ipcode = rs.getNString("PCODE");
                            String evn = rs.getNString("ENV");
                            String baseurl = rs.getNString("APATH");
                            String browser = rs.getNString("BROWSER");
                            
                            SeleniumObj seleniumObj = new SeleniumObj();
                            seleniumObj.testconnection(baseurl);
                            
                    }
            }
            catch(Exception ex){
                    String errMessage = null;

                    errMessage = "Error Message: " + ex.getMessage() + 
                       "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                       "\n" + "Stack Trace: " + ex.getStackTrace() + 
                       "\n" + "Cause: " + ex.getCause();

                    System.out.println(errMessage);

                    JOptionPane.showMessageDialog(jFrame,  "Browser loading failed" + 
                                   "\n" + errMessage, "Test Case Execution", JOptionPane.ERROR_MESSAGE);
            }
    }
    
    private static int iterationTC;
    
    public static void setIterationTestCase(int givenValue){
            iterationTC = givenValue;
    }
    
    public static Integer getIterationTestCase(){
            return iterationTC;
    }
    
    public int AccessIterationTestCase(String ProjCode, String TestCaseId, String LoginId){
            JFrame jFrame = new JFrame();
            int iterationCount = 0;
            try{
                    Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                    CallableStatement cStmt = conn.prepareCall("{call Search_TestData_CountIteration(?,?,?)}");
                    cStmt.setNString(1, ProjCode);
                    cStmt.setNString(2, TestCaseId);
                    cStmt.setNString(3, LoginId);
                    
                    ResultSet rs = cStmt.executeQuery();
                    if(rs.next()){
                            iterationCount = rs.getInt(1);
                    }
                    cStmt.close();
                    conn.close();

                    return iterationCount;
            }
            catch(Exception ex){
                    String errMessage = null;

                    errMessage = "Error Message: " + ex.getMessage() + 
                       "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                       "\n" + "Stack Trace: " + ex.getStackTrace() + 
                       "\n" + "Cause: " + ex.getCause();

                    System.out.println(errMessage);

                    JOptionPane.showMessageDialog(jFrame,  "Browser loading failed" + 
                                   "\n" + errMessage, "Test Case Execution", JOptionPane.ERROR_MESSAGE);
                    return iterationCount;
            }
    }
    
    public void AccessTestScript(String ProjCode, String TestCaseId, int Iteration, String LoginId, int TestCycle, int TestRun){
        JFrame jFrame = new JFrame();
        try{
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                CallableStatement cStmt = conn.prepareCall("{call Select_CreateTestScript(?,?,?,?)}");
                cStmt.setNString(1, ProjCode);
                cStmt.setNString(2, TestCaseId);
                cStmt.setInt(3, Iteration);
                cStmt.setNString(4, LoginId);
                
                boolean executeResult = true;
                String storedUserName = "";
                String storedUserPassword = "";
                String storedUserCode = "";
                boolean TakeScreenshot = false;
                
                ResultSet rs = cStmt.executeQuery();
                while(rs.next()){
                        /*
                        [TESTCASEID] = TS.TESTCASEID,
                        [USERCODE] = TS.USER_CODE,
                        [MAINMODULE] = TS.MAIN_MODULE,
                        [SUBMODULE] = TS.SUB_MODULE,
                        [FUNCCODE] = TD.FUNCTION_CODE,
                        [MENUREF] = TS.MENU_REFERENCE,
                        [FIELDREF] = TD.FIELD_REFERENCE,
                        [FIELDID] = TD.FIELD_ID,
                        [ELEMID] = TS.ELEMENT_ID,
                        [ELEMXPATH] = TS.ELEMENT_XPATH,
                        [LINK_VALUE] = TS.LINK_VALUE,
                        [PAGE_TITLE] = TS.PAGE_TITLE,
                        [ELEMTYPE] = TS.ELEMENT_TYPE,
                        [FIELDVALUE] = TD.FIELD_VALUE,
                        [ELEMACTION] = TS.ELEMENT_ACTION,
                        [ITERATION] = TD.ITERATION,
                        [ELEMENT_RESULT] = TS.ELEMENT_RESULT
                        */
                        String testcaseId = rs.getNString("TESTCASEID");
                        String usercode = rs.getNString("USERCODE");
                        String mainmode = rs.getNString("MAINMODULE");
                        String submode = rs.getNString("SUBMODULE");
                        String funccode = rs.getNString("FUNCCODE");
                        String menuref = rs.getNString("MENUREF");
                        String fieldref = rs.getNString("FIELDREF");
                        String fieldid = rs.getNString("FIELDID");
                        String elemid = rs.getNString("ELEMID");
                        String elemxpath = rs.getNString("ELEMXPATH");
                        String linkvalue = rs.getNString("LINK_VALUE");
                        String pagetitle = rs.getNString("PAGE_TITLE");
                        String elemtype = rs.getNString("ELEMTYPE");
                        String fieldvalue = rs.getNString("FIELDVALUE");
                        String resultflag = rs.getNString("ELEMENT_RESULT");
                        
                        if(fieldvalue == null){
                            fieldvalue = "null";
                        }
                        else{
                            fieldvalue = rs.getNString("FIELDVALUE");
                        }
                        String elemaction = rs.getNString("ELEMACTION");
                        int iteration = rs.getInt("ITERATION");
                        
                        if(!menuref.equals("null")){
                            fieldvalue = ReplaceCurrentValue(menuref, elemid, elemxpath, fieldvalue);
                        }
                        
                        if(resultflag.equals("TakeScreenshot")){
                            TakeScreenshot = true;
                        }
                        else{
                            TakeScreenshot = false;
                        }
                        //MapElementType(String Module, String Field, String Elementtype, String Elementid, String Elementxpath, String Elementvalue, String Action, 
                        //String ReferenceField, boolean TakeScreenshot, String testcaseid, String usercode, String funccode, String pagemodule, int testcycle, int testrun, String projcode)
                        
//                        if(fieldid.equals("value:1:1:1") || fieldid.equals("Secured Limit")){
//                            System.out.println("stop");
//                        }

                        if(fieldid.equals("Frame")){
                            System.out.println("Stop");
                        }
                        else if(fieldid.equals("Main Page")){
                            System.out.println("Stop");
                        }
                        
                        //SDA Regular
                        //fieldName:START.DATE:1:1
                        
                        if(fieldid.equals("Store")){
                            String newXpath = "//a[contains(text()," + '"' + fieldvalue + '"' + ")]";
                            elemxpath = newXpath;
                        }
                        
                        //MapElementType(String Module, String Field, String Elementtype, String Elementid, String Elementxpath, String Elementvalue, String Action, 
                        //String ReferenceField, boolean TakeScreenshot, String testcaseid, String usercode, String funccode, String pagemodule, int testcycle, int testrun, String projcode, String loginid, String LinkText, String PageTitle)
                        executeResult = ExcelObject.MapElementType(mainmode, fieldid, elemtype, elemid, elemxpath, fieldvalue, elemaction, fieldref, TakeScreenshot, testcaseId, usercode, funccode, mainmode, TestCycle, TestRun, ProjCode, LoginId, linkvalue, pagetitle);
                        if(executeResult == false){
                            rs.close();
                            break;
                        }
                }
                SeleniumObj.CloseBrowser();
        }
        catch(Exception ex){
            String errMessage = null;

//                    errMessage = "Error Message: " + ex.getMessage() + 
//                       "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
//                       "\n" + "Stack Trace: " + ex.getStackTrace() + 
//                       "\n" + "Cause: " + ex.getCause();
//
//                    System.out.println(errMessage);
            errMessage = SeleniumObj.getEventErrorMsg();
            
            jFrame.setSize(480, 10);
            
            JOptionPane.showMessageDialog(jFrame,  "Browser loading failed" + 
                "\n" + errMessage, "Test Case Execution", JOptionPane.ERROR_MESSAGE);

        }
    }
    
    public static String ReplaceCurrentValue (String findValue, String ElemID, String ElemXpath, String GivenValue){
        String replaceValue = "";
        
        if(ElemID != "null" || !ElemID.equals("null")){
            replaceValue = ElemXpath.replace(findValue, GivenValue);        
        }
        else if(ElemXpath != "null" || !ElemXpath.equals("null")){
            replaceValue = ElemXpath.replace(findValue, GivenValue);        
        }
        
        return replaceValue;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExecutePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExecutePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExecutePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExecutePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExecutePage().setVisible(true);
            }
        });
    }
    
    public void defaultset(){
            RecordIdTxt.setEnabled(false);
            ProjCodeTxt.setEnabled(false);
            ProjDescTxt.setEnabled(false);
            TestCaseIdTxt.setEnabled(true);
            TestCaseDescTxt.setEnabled(false);
            ExecYesRBtn.setEnabled(false);
            ExecNoRBtn.setEnabled(false);
            ExecYesRBtn.setSelected(false);
            ExecNoRBtn.setSelected(false);
            IterYesRBtn.setEnabled(false);
            IterNoRBtn.setEnabled(false);
            IterYesRBtn.setSelected(false);
            IterNoRBtn.setSelected(false);
            CycleNumTxt.setEnabled(false);
            RunNumTxt.setEnabled(false);
            TestResultTxt.setEnabled(false);
            RemarksTxt.setEnabled(false);
            RCATxt.setEnabled(false);
            
            TestCaseIdTxt.setText("");
            TestCaseDescTxt.setText("");
            RemarksTxt.setText("null");
            RCATxt.setText("null");
            
            AddBtn.setEnabled(true);
            ChangeBtn.setEnabled(false);
            SaveBtn.setEnabled(false);
            CancelBtn.setEnabled(false);
            ExecuteTestBtn.setEnabled(true);
            UploadBtn.setEnabled(true);
            
    }
    
    public void ChangeMode(){
            ProjCodeTxt.setEnabled(false);
            ProjDescTxt.setEnabled(false);
            TestCaseIdTxt.setEnabled(true);
            TestCaseDescTxt.setEnabled(false);
            ExecYesRBtn.setEnabled(false);
            ExecNoRBtn.setEnabled(false);
            //ExecYesRBtn.setSelected(false);
            //ExecNoRBtn.setSelected(false);
            IterYesRBtn.setEnabled(false);
            IterNoRBtn.setEnabled(false);
            //IterYesRBtn.setSelected(false);
            //IterNoRBtn.setSelected(false);
            CycleNumTxt.setEnabled(false);
            RunNumTxt.setEnabled(false);
            TestResultTxt.setEnabled(false);
            RemarksTxt.setEnabled(false);
            RCATxt.setEnabled(false);
                
            AddBtn.setEnabled(false);
            ChangeBtn.setEnabled(true);
            SaveBtn.setEnabled(false);
            CancelBtn.setEnabled(true);
            ExecuteTestBtn.setEnabled(true);
            UploadBtn.setEnabled(true);
    }
    
    public void SaveMode(){
           
            //TestCaseIdTxt.setText("");
            //TestCaseDescTxt.setText("");
            //ExecYesRBtn.setSelected(false);
            //ExecNoRBtn.setSelected(false);
            //IterYesRBtn.setSelected(false);
            //IterNoRBtn.setSelected(false);
            //CycleNumTxt.setText("0");
            //RunNumTxt.setText("0");
            

            
             if(recordflag == 0){
                //New Record
                ProjCodeTxt.setEnabled(false);
                ProjDescTxt.setEnabled(false);
                TestCaseIdTxt.setEnabled(true);
                TestCaseDescTxt.setEnabled(true);
                ExecYesRBtn.setEnabled(true);
                ExecNoRBtn.setEnabled(true);
                //ExecYesRBtn.setSelected(false);
                //ExecNoRBtn.setSelected(false);
                IterYesRBtn.setEnabled(true);
                IterNoRBtn.setEnabled(true);
                //IterYesRBtn.setSelected(false);
                //IterNoRBtn.setSelected(false);                
                
                CycleNumTxt.setText("0");
                RunNumTxt.setText("0");
                TestResultTxt.setText("null");
                
                CycleNumTxt.setEnabled(true);
                RunNumTxt.setEnabled(false);
                TestResultTxt.setEnabled(false);
                
            }
            else if(recordflag == 1){
                //Existing Record
                ProjCodeTxt.setEnabled(false);
                ProjDescTxt.setEnabled(false);
                TestCaseIdTxt.setEnabled(true);
                TestCaseDescTxt.setEnabled(true);
                ExecYesRBtn.setEnabled(true);
                ExecNoRBtn.setEnabled(true);
                //ExecYesRBtn.setSelected(false);
                //ExecNoRBtn.setSelected(false);
                IterYesRBtn.setEnabled(true);
                IterNoRBtn.setEnabled(true);
                //IterYesRBtn.setSelected(false);
                //IterNoRBtn.setSelected(false);       
                CycleNumTxt.setEnabled(true);
                RemarksTxt.setEnabled(true);
                RCATxt.setEnabled(true);

                //CycleNumTxt.setEnabled(false);
                RunNumTxt.setEnabled(false);       
                TestResultTxt.setEnabled(false);
            }
            
            AddBtn.setEnabled(false);
            ChangeBtn.setEnabled(false);
            SaveBtn.setEnabled(true);
            CancelBtn.setEnabled(true);
            ExecuteTestBtn.setEnabled(true);
            UploadBtn.setEnabled(true);    
    }
    
    public void NewMode(){
            TestCaseIdTxt.setText("");
            TestCaseDescTxt.setText("");
            ExecYesRBtn.setSelected(false);
            ExecNoRBtn.setSelected(false);
            IterYesRBtn.setSelected(false);
            IterNoRBtn.setSelected(false);
            CycleNumTxt.setText("0");
            RunNumTxt.setText("0");
            
            ProjCodeTxt.setEnabled(false);
            ProjDescTxt.setEnabled(false);
            TestCaseIdTxt.setEnabled(true);
            TestCaseDescTxt.setEnabled(false);
            ExecYesRBtn.setEnabled(false);
            ExecNoRBtn.setEnabled(false);
            IterYesRBtn.setEnabled(false);
            IterNoRBtn.setEnabled(false);

            CycleNumTxt.setEnabled(false);
            RunNumTxt.setEnabled(false);
            
            AddBtn.setEnabled(true);
            ChangeBtn.setEnabled(false);
            SaveBtn.setEnabled(false);
            CancelBtn.setEnabled(false);
            ExecuteTestBtn.setEnabled(true);
            UploadBtn.setEnabled(true);    
           
    }
    
    public void loadTesterTestCaseTbl_TestCase(){
            JFrame jFrame = new JFrame();
            try{
                    String projcode = MainGUI.getProjectCode();
                    String userid = LoginGUI.getLoginId();
                    
                    Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                    CallableStatement cStmt = conn.prepareCall("{call Search_AllTestCases_ByProjCodeUserID(?,?)}");
                    
                    TesterTestCaseTbl.setModel(new DefaultTableModel(null, new String[] {"ID","Test Case ID", "Test Case Description", "Iteration", "Execute", "Result", "Test Cycle", "Test Run", "Remarks", "RCA"}));
                    
                    /*
                    TestCaseTbl.getColumnModel().getColumn(0).setPreferredWidth(10); //TEST CASE ID
                    TestCaseTbl.getColumnModel().getColumn(1).setPreferredWidth(50); //TEST CASE DESCRIPTION
                    TestCaseTbl.getColumnModel().getColumn(2).setPreferredWidth(5); //ITERATION
                    TestCaseTbl.getColumnModel().getColumn(3).setPreferredWidth(5); //EXECUTION
                    TestCaseTbl.getColumnModel().getColumn(4).setPreferredWidth(10); //RESULT
                    TestCaseTbl.getColumnModel().getColumn(5).setPreferredWidth(5); //TEST CYCLE
                    TestCaseTbl.getColumnModel().getColumn(6).setPreferredWidth(5); //TEST RUN
                    TestCaseTbl.getColumnModel().getColumn(7).setPreferredWidth(50); //REMARKS
                    TestCaseTbl.getColumnModel().getColumn(8).setPreferredWidth(50); //RCA
                    */
                    //TestCaseTbl.getColumnModel().getColumn(7).setMinWidth(0); //REMARKS
                    //TestCaseTbl.getColumnModel().getColumn(7).setMaxWidth(0); //REMARKS
                    //TestCaseTbl.getColumnModel().getColumn(8).setMinWidth(0); //RCA
                    //TestCaseTbl.getColumnModel().getColumn(8).setMaxWidth(0); //RCA
                    
                    cStmt.setNString(1, projcode);
                    cStmt.setNString(2, userid);
                    
                    ResultSet rs = cStmt.executeQuery();
                    while(rs.next()){
                            /*
		[TCID] = TC.TESTCASEID,
		[TCDESC] = TC.TESTCASEDESCRIPTION,
		[ITERATION] = TC.ITERATION,
		[EXECUTE] = TC.EXECUTEFLAG,
		[RESULT] = TC.RESULTFLAG,
		[TESTCYCLE] = TC.TEST_CYCLE,
		[TESTRUN] = TC.TEST_RUN,
		[REMARKS] = TC.REMARKS,
		[RCA] = TC.RCA
                            */
                            String id = NumberToTextConverter.toText(rs.getInt("ID"));
                            String tcid = rs.getNString("TCID");
                            String tcdesc = rs.getNString("TCDESC");
                            String iteration = rs.getNString("ITERATION");
                            String execute = rs.getNString("EXECUTE");
                            String result = rs.getNString("RESULT");
                            String cycle = NumberToTextConverter.toText(rs.getInt("TESTCYCLE"));
                            String run = NumberToTextConverter.toText(rs.getInt("TESTRUN"));
                            String remarks = "null";
                            if(rs.getString("REMARKS") != null){
                               remarks =  rs.getString("REMARKS");
                            }
                            
                            String rca = "null";
                            if(rs.getString("RCA") != null){
                                rca = rs.getString("RCA");
                            };
                            
                            String[] tbldata = {id,tcid, tcdesc, iteration, execute, result, cycle, run, remarks, rca};
                            DefaultTableModel tblmodel = (DefaultTableModel)TesterTestCaseTbl.getModel();
                            tblmodel.addRow(tbldata);
                    }
                    
                    TesterTestCaseTbl.getColumnModel().getColumn(0).setPreferredWidth(40);
                    TesterTestCaseTbl.getColumnModel().getColumn(1).setPreferredWidth(100);
                    TesterTestCaseTbl.getColumnModel().getColumn(2).setPreferredWidth(200);                    

                    cStmt.close();
                    conn.close();    
            }
            catch(Exception ex){
                    String errMessage = null;

                    errMessage = "Error Message: " + ex.getMessage() + 
                       "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                       "\n" + "Stack Trace: " + ex.getStackTrace() + 
                       "\n" + "Cause: " + ex.getCause();

                    System.out.println(errMessage);

                    JOptionPane.showMessageDialog(jFrame,  "Saving Failed " + 
                                   "\n" + errMessage, "Maintenance", 0);
            }
        
    }
    
    public void loadDeclaredTestCaseTbl_TestCase(String givenProjCode){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_AllTestCases_ByUserIdNullActive(?)}");
            cs.setNString(1, givenProjCode);
            
            DeclaredTestCaseTbl.setModel(new DefaultTableModel(null, new String[] {"ID","Test Case ID", "Test Case Description", "Iteration", "Execute", "Result", "Test Cycle", "Test Run", "Remarks", "RCA", "Status"}));
            ResultSet rs = cs.executeQuery();
            while(rs.next()){
                            String id = NumberToTextConverter.toText(rs.getInt("ID"));
                            String tcid = rs.getNString("TCID");
                            String tcdesc = rs.getNString("TCDESC");
                            String iteration = rs.getNString("ITERATION");
                            String execute = rs.getNString("EXECUTE");
                            String result = rs.getNString("RESULT");
                            String cycle = NumberToTextConverter.toText(rs.getInt("TESTCYCLE"));
                            String run = NumberToTextConverter.toText(rs.getInt("TESTRUN"));
                            String remarks = "null";
                            if(rs.getString("REMARKS") != null){
                               remarks =  rs.getString("REMARKS");
                            }
                            
                            String rca = "null";
                            if(rs.getString("RCA") != null){
                                rca = rs.getString("RCA");
                            };
                            
                            String statuscode = rs.getString("STATUSCODE");
                            
                            String[] tbldata = {id,tcid, tcdesc, iteration, execute, result, cycle, run, remarks, rca, statuscode};
                            DefaultTableModel tblmodel = (DefaultTableModel)DeclaredTestCaseTbl.getModel();
                            tblmodel.addRow(tbldata);
                    }
                    
                    rs.close();
                    cs.close();
                    conn.close();
                    
                    DeclaredTestCaseTbl.getColumnModel().getColumn(0).setPreferredWidth(40);
                    DeclaredTestCaseTbl.getColumnModel().getColumn(1).setPreferredWidth(100);
                    DeclaredTestCaseTbl.getColumnModel().getColumn(2).setPreferredWidth(200);            
            
        }
        catch(Exception ex){
                    String errMessage = null;

                    errMessage = "Error Message: " + ex.getMessage() + 
                       "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                       "\n" + "Stack Trace: " + ex.getStackTrace() + 
                       "\n" + "Cause: " + ex.getCause();

                    System.out.println(errMessage);

                    JOptionPane.showMessageDialog(jFrame,  "Saving Failed " + 
                                   "\n" + errMessage, "Maintenance", 0);            
        }
    }
    
    
    private String strSignonname;
    private String strPassword;
    
    public void getLoginCredentials(String projcode, String userid){
            JFrame jFrame = new JFrame();
            String returnValue = "";
            String strUser = "";
            String strPass = "";
            
            //String projcode = MainGUI.getProjectCode();
            
            try{
                    //if(givenValue.contains("signon")){
                    Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                    CallableStatement cStmt = conn.prepareCall("{call Search_TDDUser_ByProjCodeUserCode(?,?)}");

                    cStmt.setNString(1, projcode);
                    cStmt.setNString(2, userid);

                    ResultSet rs = cStmt.executeQuery();

                    if(rs.next()){
                            strUser = rs.getNString("LOGIN");
                            strPass = rs.getNString("PASSWORD");

                            setUserName(strUser);
                            setUserPassword(strPass);
                    }
                    cStmt.close();
                    conn.close();
                    //}
            }
            catch(Exception ex){
                    String errMessage = null;

                    errMessage = "Error Message: " + ex.getMessage() + 
                       "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                       "\n" + "Stack Trace: " + ex.getStackTrace() + 
                       "\n" + "Cause: " + ex.getCause();

                    System.out.println(errMessage);

                    JOptionPane.showMessageDialog(jFrame,  "Browser loading failed" + 
                                   "\n" + errMessage, "Test Case Execution", JOptionPane.ERROR_MESSAGE);                
            }
            
            //return returnValue;
    }
    
    public void setUserName(String givenValue){
            strSignonname = givenValue;
    }
    
    public String getUserName(){
            return strSignonname;
    }
    
    public void setUserPassword(String givenValue){
            strPassword = givenValue;
    }
    
    public String getUserPassword(){
            return strPassword;
    }

    public static boolean InsertTestCaseForTester(String givenProjCode, String givenTestCaseId, String givenTestCaseDesc, String givenIterationFlag, String givenExecuteFlag,
            String givenResultFlag, int givenTestCycle, int givenTestRun, String givenRemarks, String givenRCA, String givenUserId, String givenStatusCode){
        JFrame jFrame = new JFrame();
        boolean result = false;
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            //CallableStatement cs = conn.prepareCall("{call Insert_TestCases(?,?,?,?,?,?,?,?,?,?,?,?)}");
            CallableStatement cs = conn.prepareCall("{call Insert_TestCases(?,?,?,?,?,?,?,?,?,?,?,?)}");
            
            /*
            1@proj_code NVARCHAR(20),
            2@testcaseid NVARCHAR(12),
            3@testcasedescription NVARCHAR(100),
            4@iteration NVARCHAR(1),
            5@executeflag NVARCHAR(1),
            6@resultflag NVARCHAR(6),
            7@test_cycle INT,
            8@test_run INT,
            9@remarks TEXT,
            10@rca TEXT,
            11@userid NVARCHAR(8),
            12@tc_status NVARCHAR(2) 
            */
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setNString(3, givenTestCaseDesc);
            cs.setNString(4, givenIterationFlag);
            cs.setNString(5, givenExecuteFlag);
            cs.setNString(6, givenResultFlag);
            cs.setInt(7, givenTestCycle);
            cs.setInt(8, givenTestRun);
            cs.setString(9, givenRemarks);
            cs.setString(10, givenRCA);
            cs.setNString(11, givenUserId);
            cs.setNString(12, givenStatusCode);
            
            int executeflag = cs.executeUpdate();
            if(executeflag < 0){
                result = true;                
            }
            else{
                result = false;
            }
            cs.close();
            conn.commit();
            conn.close();
           
            return result;
        }
        catch(Exception ex){
            
            result = false;
            
            return result;
            
        }
    }
    
    public static boolean ValidateTestCaseId_ByUserId(String givenProjCode, String givenTestCaseId, String givenLoginId){
        JFrame jFrame = new JFrame();
        boolean result = false;
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ExistingTestCaseID_ByProjCodeTestCaseIdLoginId(?,?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setNString(3, givenLoginId);

            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                result = true;
            }
            
            return result;
        }
        catch(Exception ex){
            String errMessage = null;

            errMessage = "Error Message: " + ex.getMessage() + 
               "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
               "\n" + "Stack Trace: " + ex.getStackTrace() + 
               "\n" + "Cause: " + ex.getCause();

            System.out.println(errMessage);

            JOptionPane.showMessageDialog(jFrame,  "Saving Failed " + 
                           "\n" + errMessage, "Maintenance", 0);            
            
            return result;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton AppDataSourceBtn;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton CancelBtn;
    private javax.swing.JButton ChangeBtn;
    private javax.swing.JTextField CycleNumTxt;
    private javax.swing.JTable DeclaredTestCaseTbl;
    private javax.swing.JRadioButton ExecNoRBtn;
    private javax.swing.JRadioButton ExecYesRBtn;
    private javax.swing.JButton ExecuteTestBtn;
    private javax.swing.JButton ExecutionLogBtn;
    private javax.swing.JButton ForceStopBtn;
    private javax.swing.JRadioButton IterNoRBtn;
    private javax.swing.JRadioButton IterYesRBtn;
    private javax.swing.JButton MenuTestScriptBtn;
    private javax.swing.JTextField ProjCodeTxt;
    private javax.swing.JTextField ProjDescTxt;
    private javax.swing.JTextArea RCATxt;
    private javax.swing.JTextField RecordIdTxt;
    private javax.swing.JTextArea RemarksTxt;
    private javax.swing.JTextField RunNumTxt;
    private javax.swing.JButton SaveBtn;
    private javax.swing.JTextField TestCaseDescTxt;
    private javax.swing.JTextField TestCaseIdTxt;
    private javax.swing.JButton TestDataBtn;
    private javax.swing.JTextField TestResultTxt;
    private javax.swing.JButton TestScriptBtn;
    private javax.swing.JTable TesterTestCaseTbl;
    private javax.swing.JButton UploadBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
