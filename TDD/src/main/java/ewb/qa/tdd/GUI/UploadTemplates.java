/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ewb.qa.tdd.GUI;

import ewb.qa.tdd.SQLObj;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.JTable;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import org.apache.poi.ss.util.NumberToTextConverter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

/**
 *
 * @author JPE61800
 */
public class UploadTemplates extends javax.swing.JFrame {

    /**
     * Creates new form UploadTemplates
     */
    public UploadTemplates() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        AppDataSourceTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        FunctionalityTxt = new javax.swing.JTextField();
        AppDataSourceCBox = new javax.swing.JCheckBox();
        FunctionalityCBox = new javax.swing.JCheckBox();
        UploadBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        TestDataFilePathTxt = new javax.swing.JTextField();
        TestDataCBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        MenuFilePathTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        MenuUserCodeTxt = new javax.swing.JTextField();
        MenuCBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        ProductFilePathTxt = new javax.swing.JTextField();
        ProductCBox = new javax.swing.JCheckBox();
        ProductUserCodeTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Template Upload - Maintenance");

        jLabel1.setText("App DataSource File path : ");

        jLabel2.setText("Functionality File path :");

        UploadBtn.setText("Upload");
        UploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Test Data File path :");

        jLabel4.setText("Menu File path :");

        jLabel5.setText("Menu User Code :");

        jLabel6.setText("Product File path :");

        jLabel7.setText("Product User Code :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(BackBtn)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MenuUserCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(UploadBtn)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(AppDataSourceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(FunctionalityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(TestDataFilePathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MenuFilePathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ProductFilePathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ProductUserCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(FunctionalityCBox)
                                .addComponent(AppDataSourceCBox)
                                .addComponent(TestDataCBox)
                                .addComponent(MenuCBox)
                                .addComponent(ProductCBox)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AppDataSourceCBox)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(AppDataSourceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FunctionalityCBox)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(FunctionalityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(TestDataFilePathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TestDataCBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MenuFilePathTxt)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(MenuCBox)))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MenuUserCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6)
                        .addComponent(ProductFilePathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ProductCBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductUserCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UploadBtn)
                    .addComponent(BackBtn))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void UploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadBtnActionPerformed
        // TODO add your handling code here:
        boolean AppDataSourceFlag = AppDataSourceCBox.isSelected();
        boolean FunctionFlag = FunctionalityCBox.isSelected();
        boolean TestDataFlag = TestDataCBox.isSelected();
        boolean MenuFlag = MenuCBox.isSelected();
        boolean ProductFlag = ProductCBox.isSelected();
        
        String loginid = LoginGUI.getLoginId();
        
        String filename = "";
        String worksheetname = "";
        JFrame jFrame = new JFrame();
        boolean result;
        
        if(AppDataSourceFlag){
            result = false;
            filename = AppDataSourceTxt.getText();
            worksheetname = "Automation App DataSource";
            
            if(filename.contains("Architecture")){
                try{
                    if(ValidateFilePath(filename)){
                        result = AppDataSource(filename, worksheetname);
                        if(result){
                            JOptionPane.showMessageDialog(jFrame, "App DataSource was uploaded successfully", "Upload Template Maintenace", JOptionPane.INFORMATION_MESSAGE);
                        }                                       
                    }
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(jFrame, "The entered file path is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(jFrame, "The entered file path is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        if(FunctionFlag){
            filename = FunctionalityTxt.getText();
            worksheetname = "";
            result = false;
            
            if(filename.contains("Functionality")){
                try{
                    if(ValidateFilePath(filename)){
                        result = Functionality(filename);
                        if(result){
                            JOptionPane.showMessageDialog(jFrame, "Functionality was uploaded successfully", "Upload Template Maintenace", JOptionPane.INFORMATION_MESSAGE);
                        }                              
                    }
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(jFrame, "The entered file path is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
                }
          
            }
            else{
                JOptionPane.showMessageDialog(jFrame, "The entered file path is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        if(TestDataFlag){
            result = false;
            filename = TestDataFilePathTxt.getText();
            if(filename.contains("TestData")){
                try{
                    if(ValidateFilePath(filename)){
                        result = TestData(filename, loginid);
                        if(result){
                            JOptionPane.showMessageDialog(jFrame, "Test Data was uploaded successfully", "Upload Template Maintenace", JOptionPane.INFORMATION_MESSAGE);
                        }                                        
                    }
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(jFrame, "The entered file path is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(jFrame, "The entered file path is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
            }       
        }
        
        if(MenuFlag){
            result = false;
            filename = MenuFilePathTxt.getText();
            String usercode = MenuUserCodeTxt.getText();
            
            if(filename.contains("Menu") && !usercode.equals("")){
                try{
                    if(ValidateFilePath(filename)){
                        result = Menu(filename, usercode);
                        if(result){
                            JOptionPane.showMessageDialog(jFrame, "Menu was uploaded successfully", "Upload Template Maintenace", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }                                        
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(jFrame, "The entered file path and user code is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(jFrame, "The entered file path and user code is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        if(ProductFlag){
            result = false;
            filename = ProductFilePathTxt.getText();
            String usercode = ProductUserCodeTxt.getText();
            
            if(filename.contains("ProductMenu")){
                try{
                    if(ValidateFilePath(filename)){
                        if(!usercode.equals("")){
                            result = Product(filename, usercode);
                            if(result){
                                JOptionPane.showMessageDialog(jFrame, "Product Menu was uploaded successfully", "Upload Template Maintenace", JOptionPane.INFORMATION_MESSAGE);
                            }                            
                        }
                        else{
                            JOptionPane.showMessageDialog(jFrame, "The Product User Code is invalid or empty, kindly check the provide space", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
                            ProductUserCodeTxt.setFocusable(true);
                        }
                    }                                        
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(jFrame, "The entered file path and user code is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(jFrame, "The entered file path and user code is invalid, kindly check and correct the file", "Upload Template Maintenace", JOptionPane.ERROR_MESSAGE);
            }            
        }
        
    }//GEN-LAST:event_UploadBtnActionPerformed

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        MainGUI execPage = new MainGUI();
        execPage.setVisible(true);
    }//GEN-LAST:event_BackBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadTemplates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadTemplates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadTemplates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadTemplates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadTemplates().setVisible(true);
            }
        });
    }

    public static boolean AppDataSource(String givenFileName, String givenWorksheetName){
        JFrame jFrame = new JFrame();
        boolean respondresult = false;
        try{
            //filename = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\T24 Architecture Layout.xlsx";
            //worksheetname = "Automation App DataSource";
            //lastcolumn = 14;
            //spcommand = "{call Insert_AppDataSource(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
            int lastcolumn = 0;

            ExcelObject excelObj = new ewb.qa.tdd.GUI.ExcelObject();
            String spcommand = "{call Insert_AppDataSource(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
            String qcommand = "TRUNCATE TABLE dbo.APP_DATASOURCE";
            //qcommand = "";
            excelObj.getArchDataSource(givenFileName, givenWorksheetName, spcommand, qcommand);
            //excelObj.getSpecificWorksheet_Excel(filename, worksheetname, lastcolumn, spcommand, qcommand);
            System.out.println("Successfully Insert data to dbo.APP_DATASOURCE");            
            respondresult = true;
            return respondresult;
        }
        catch(Exception ex){            
            respondresult = false;
            
            return respondresult;
        }
    }
    
    public static boolean Functionality(String givenFileName){
        boolean respondresult = false;
        try{
            //filename = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\TDD_FunctionalityMaker.xlsx";
            String spcommand = "{call Insert_PageTestscript(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
            //getGetWorksheetList_Excel(String filename, String spcommand, int lastcolumn)
            ExcelObject excelObj = new ewb.qa.tdd.GUI.ExcelObject();
            
            excelObj.getGetWorksheetList_Excel(givenFileName, spcommand);
            System.out.println("Successfully Insert data to dbo.PAGE_TESTSCRIPT - MAKER");            
            respondresult = true;
            return respondresult;
        }
        catch(Exception ex){
            respondresult = false;
            return respondresult;
        }
    }
    
    public static boolean TestData(String givenFileName, String givenLoginId){
        boolean respondresult = false;
        try{
            //filename = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\TestDataTemplate.xlsx";
            //String spcommand = "{call Insert_Testdata_ByLoginId(?,?,?,?,?,?,?)}";
            ExcelObject excelObj = new ewb.qa.tdd.GUI.ExcelObject();
            
            excelObj.setTestData(givenFileName, givenLoginId);
            System.out.println("Successfully Insert data to dbo.TESTDATA");           
            respondresult = true;
            return respondresult;
        }
        catch(Exception ex){
            return respondresult;
        }
    }
    
    public static boolean Menu(String givenFileName, String givenUserCode){
        boolean respondresult = false;
        try{
             //filename = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\UniversalTellerMenu.xlsx";
             //worksheetname = "User0001";
             String spcommand = "{call Insert_Menumap(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
             //lastcolumn = 17;
             ExcelObject excelObj = new ewb.qa.tdd.GUI.ExcelObject();
             //qcommand = "";
             //sequenceflag = "N";
             if(excelObj.getSpecificWorksheet_Excel(givenFileName, givenUserCode, spcommand)){
                if(excelObj.readUserMenuMap_ByUserCode(givenUserCode, givenFileName)){
                    System.out.println("Successfully Insert data to dbo.USER_MENUMAP");
                    respondresult = true;                                     
                }
             }
             return respondresult;
        }
        catch(Exception ex){
            return respondresult;                 
        }
    }
    
    public static boolean Product(String givenFileName, String givenUserCode){
        boolean respondresult = false;
        try{
            if(Prod_Category(givenFileName, givenUserCode)){
                if(Prod_Group(givenFileName, givenUserCode)){
                    if(Prod_Product(givenFileName, givenUserCode)){
                        respondresult = true;   
                    }
                }
            }            
            return respondresult;
        }
        catch(Exception ex){
            return respondresult;            
        }
    }
    
    public static boolean Prod_Category(String givenFileName, String givenUserCode)throws Exception{
        boolean respondresult = false;
        JFrame jFrame = new JFrame();
        ExcelObject excelObj = new ewb.qa.tdd.GUI.ExcelObject();

        //String FileName = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\UniversalTeller_ProductMenu.xlsx";
        //String FileName = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\CBGMaker_ProductMenu.xlsx";
        String UserCode = "";
        String projcode = MainGUI.getProjectCode();
        String WorkSheetName = "";
        String TblName = "CATEGORY_MENUMAP";
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            //CallableStatement cStmt = conn.prepareCall("{call Search_All_TDDUser_ByProjCode(?)}");
            CallableStatement cStmt = conn.prepareCall("{call Search_All_TDDUser_ByProjCodeUserCode(?,?)}");
            cStmt.setNString(1, projcode);
            cStmt.setNString(2, givenUserCode);
            
            ResultSet rs = cStmt.executeQuery();
            
            while(rs.next()){
                
                //[ID] = TU.ID,
                //[PROJ_CODE] = TU.PROJECT_CODE,
                //[CODE] = TU.USER_CODE,
                //[NAME] = TU.USER_NAME,
                //[TYPE] = TU.USER_TYPE,
                //[FIELD_LOGIN] = TU.FIELD_LOGIN,
                //[LOGIN] = TU.APP_LOGIN,
                //[FIELD_PASSWORD] = TU.FIELD_PASSWORD,
                //[PASSWORD] = TU.APP_PASSWORD                
                
                String ProjCode = rs.getNString("PROJ_CODE");
                UserCode = rs.getNString("CODE");
                WorkSheetName = UserCode;
                
                excelObj.UploadProductMenuMap(givenFileName, WorkSheetName, UserCode, ProjCode, TblName);                            
            }
           
            respondresult = true;
            cStmt.close();
            conn.close();
            JOptionPane.showConfirmDialog(jFrame, "Category Menu Map - Upload Complete", "Maintenance - Category Menu Map", JOptionPane.OK_OPTION);
            
            return respondresult;
        }
        catch(Exception ex){
            respondresult = false;
            String errMessage = null;

             errMessage = "Error Message: " + ex.getMessage() + 
                "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                "\n" + "Stack Trace: " + ex.getStackTrace() + 
                "\n" + "Cause: " + ex.getCause();

             System.out.println(errMessage); 
//             JOptionPane.showConfirmDialog(jFrame, errMessage, "Maintenance - Category Menu Map", JOptionPane.ERROR_MESSAGE);
             return respondresult;
        }                
    }
    
    public static boolean Prod_Group(String givenFileName, String givenUserCode)throws Exception{
        boolean respondresult = false;
        JFrame jFrame = new JFrame();
        ExcelObject excelObj = new ewb.qa.tdd.GUI.ExcelObject();

        //String FileName = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\UniversalTeller_ProductMenu.xlsx";
        //String FileName = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\CBGMaker_ProductMenu.xlsx";
        String projcode = MainGUI.getProjectCode();
        String worksheetname = "";
        String TblName = "GROUP_MENUMAP";
        
        //try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
//            CallableStatement cStmt = conn.prepareCall("{call Select_TDDUserCatMenuMap_ByProjCode(?)}");
            CallableStatement cStmt = conn.prepareCall("{call Select_TDDUserCatMenuMap_ByProjCodeUserCode(?,?)}");
            
            cStmt.setNString(1, projcode);
            cStmt.setNString(2, givenUserCode);
            
            ResultSet rs = cStmt.executeQuery();
            
            while(rs.next()){
                //[ID]
                //[PROJCODE] = TU.PROJECT_CODE,
                //[USERCODE] = TU.USER_CODE,
                //[CATEGORYID] = PM.CATEGORY_ID                
                
                //String Id = NumberToTextConverter.toText(rs.getInt(1));
                String ProjCode = rs.getNString(1);
                String UserCode = rs.getNString(2);
                String CategoryId = rs.getNString(3);
                
                excelObj.UploadProductMenuMap(givenFileName, CategoryId, UserCode, ProjCode, TblName);    
                
            }
            
            respondresult = true;
            cStmt.close();
            conn.close();
            
//            JOptionPane.showConfirmDialog(jFrame, "Group Menu Map - Upload Complete", "Maintenance - Group Menu Map", JOptionPane.OK_OPTION);
            
            return respondresult;
//        }
//        catch(Exception ex){
//            respondresult = false;
//            String errMessage = null;
//        
//             errMessage = "Error Message: " + ex.getMessage() + 
//                "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
//                "\n" + "Stack Trace: " + ex.getStackTrace() + 
//                "\n" + "Cause: " + ex.getCause();
//
//             System.out.println(errMessage); 
//             JOptionPane.showConfirmDialog(jFrame, errMessage, "Maintenance - Group Menu Map", JOptionPane.ERROR_MESSAGE);            
//             return respondresult;
//        }        
    }
    
    public static boolean  Prod_Product(String givenFileName, String givenUserCode)throws Exception{
        boolean respondresult = false;
        JFrame jFrame = new JFrame();
        ExcelObject excelObj = new ewb.qa.tdd.GUI.ExcelObject();

        //String FileName = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\UniversalTeller_ProductMenu.xlsx";
        
        //String FileName = "D:\\QA\\Projects\\Test Automation\\Java_SeleniumWebDriver_Demo\\templates\\CBGMaker_ProductMenu.xlsx";
        String projcode = MainGUI.getProjectCode();
        String worksheetname = "";
        String TblName = "PRODUCT_MENUMAP";        
        
//        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
//            CallableStatement cStmt = conn.prepareCall("{call Select_TDDUserCatMenuMapGrpMenuMap_ByProjCode(?)}");
            CallableStatement cStmt = conn.prepareCall("{call Select_TDDUserCatMenuMapGrpMenuMap_ByProjCodeUserCode(?,?)}");
            
            cStmt.setNString(1, projcode);
            cStmt.setNString(2, givenUserCode);
            ResultSet rs = cStmt.executeQuery();
            
            while(rs.next()){
                //[PROJCODE] = PM.PROJ_CODE,
                //[USERCODE] = PM.USER_CODE,
                //[GROUPID] = CM.GROUP_ID          

                //String Id = NumberToTextConverter.toText(rs.getInt(1));
                String ProjCode = rs.getNString(1);
                String UserCode = rs.getNString(2);
                String GroupId = rs.getNString(3);
              
                excelObj.UploadProductMenuMap(givenFileName, GroupId, UserCode, ProjCode, TblName);    
                
            }
            respondresult = true;
            cStmt.close();
            conn.close();
            
//            JOptionPane.showConfirmDialog(jFrame, "Product Menu Map - Upload Complete", "Maintenance - Product Menu Map", JOptionPane.OK_OPTION);            
            return respondresult;
//        }
//        catch(Exception ex){
//            respondresult = false;
//            String errMessage = null;
//
//             errMessage = "Error Message: " + ex.getMessage() + 
//                "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
//                "\n" + "Stack Trace: " + ex.getStackTrace() + 
//                "\n" + "Cause: " + ex.getCause();
//
//             System.out.println(errMessage); 
//             JOptionPane.showConfirmDialog(jFrame, errMessage, "Maintenance - Product Menu Map", JOptionPane.ERROR_MESSAGE);         
//
//             return respondresult;
//        }                
        //return respondresult;
    }
    
    public static boolean ValidateFilePath(String givenFilePath) throws IOException{
        FileInputStream fis = null;
        boolean result = false;
        JFrame jFrame = new JFrame();
        
        fis = new FileInputStream(givenFilePath);
        result = true;
        fis.close();
        return result;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AppDataSourceCBox;
    private javax.swing.JTextField AppDataSourceTxt;
    private javax.swing.JButton BackBtn;
    private javax.swing.JCheckBox FunctionalityCBox;
    private javax.swing.JTextField FunctionalityTxt;
    private javax.swing.JCheckBox MenuCBox;
    private javax.swing.JTextField MenuFilePathTxt;
    private javax.swing.JTextField MenuUserCodeTxt;
    private javax.swing.JCheckBox ProductCBox;
    private javax.swing.JTextField ProductFilePathTxt;
    private javax.swing.JTextField ProductUserCodeTxt;
    private javax.swing.JCheckBox TestDataCBox;
    private javax.swing.JTextField TestDataFilePathTxt;
    private javax.swing.JButton UploadBtn;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
