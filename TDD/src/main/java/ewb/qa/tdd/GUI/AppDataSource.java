/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ewb.qa.tdd.GUI;

import ewb.qa.tdd.SQLObj;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.JTable;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import java.awt.*;
import java.awt.event.*;
import org.apache.poi.ss.util.NumberToTextConverter;
import ewb.qa.tdd.GUI.MainGUI.*;
import ewb.qa.tdd.SeleniumObj;
import javax.swing.table.TableColumnModel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.*;

import org.apache.commons.io.FileUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.chrome.ChromeDriver;
/**
 *
 * @author JPE61800
 */
public class AppDataSource extends javax.swing.JFrame {
    private static int flagmode = 0;
    
    /**
     * Creates new form AppDataSource
     */
    public AppDataSource() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        CancelBtn = new javax.swing.JButton();
        SaveBtn = new javax.swing.JButton();
        ChangeBtn = new javax.swing.JButton();
        NewBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        ProjCodeTxt = new javax.swing.JTextField();
        ProjDescTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        TestCaseIdCmb = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        UserCodeCmb = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        UserTypeTxt = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        MainModuleTxt = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        SubModuleTxt = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        FunctionMapTxt = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        MainMenuTxt = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        MainCodeCmb = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        SubMenuTxt = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        SubCodeCmb = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        ChildMenuTxt = new javax.swing.JTextField();
        ChildCodeCmb = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        GChildMenu1Txt = new javax.swing.JTextField();
        GChildCode1Cmb = new javax.swing.JComboBox<>();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        GChildMenu2Txt = new javax.swing.JTextField();
        GChildCode2Cmb = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        AppDataSourceTbl = new javax.swing.JTable();
        IdTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        SequenceTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        GChildMenu3Txt = new javax.swing.JTextField();
        GChildCode3Cmb = new javax.swing.JComboBox<>();
        FunctionOpt = new javax.swing.JRadioButton();
        ProductOpt = new javax.swing.JRadioButton();
        FunctionCodeCmb = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("App DataSource Maintenance");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        SaveBtn.setText("Save");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        ChangeBtn.setText("Change");
        ChangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeBtnActionPerformed(evt);
            }
        });

        NewBtn.setText("New");
        NewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBtnActionPerformed(evt);
            }
        });

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        jLabel20.setText("Project Code :");

        ProjCodeTxt.setText("jTextField1");

        ProjDescTxt.setText("jTextField2");

        jLabel21.setText("Test Case ID :");

        TestCaseIdCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        TestCaseIdCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestCaseIdCmbActionPerformed(evt);
            }
        });

        jLabel22.setText("User Type :");

        UserCodeCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserCodeCmbActionPerformed(evt);
            }
        });

        jLabel23.setText("User Code :");

        UserTypeTxt.setText("jTextField3");

        jLabel24.setText("Main Module :");

        MainModuleTxt.setText("jTextField4");

        jLabel25.setText("Sub Module :");

        SubModuleTxt.setText("jTextField5");

        jLabel26.setText("Function Code :");

        jLabel27.setText("Function Map :");

        FunctionMapTxt.setText("jTextField7");

        jLabel28.setText("Main Menu :");

        MainMenuTxt.setText("jTextField8");

        jLabel29.setText("Main Code :");

        MainCodeCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainCodeCmbActionPerformed(evt);
            }
        });

        jLabel30.setText("Sub Menu :");

        SubMenuTxt.setText("jTextField9");

        jLabel31.setText("Sub Code :");

        SubCodeCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubCodeCmbActionPerformed(evt);
            }
        });

        jLabel32.setText("Child Menu :");

        jLabel33.setText("Child Code :");

        ChildMenuTxt.setText("jTextField10");

        ChildCodeCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChildCodeCmbActionPerformed(evt);
            }
        });

        jLabel34.setText("Grand Child Menu 1 :");

        jLabel35.setText("Grand Child Code 1 :");

        GChildMenu1Txt.setText("jTextField11");

        GChildCode1Cmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GChildCode1CmbActionPerformed(evt);
            }
        });

        jLabel36.setText("Grand Child Menu 2 :");

        jLabel37.setText("Grand Child Code 2 :");

        GChildMenu2Txt.setText("jTextField12");

        GChildCode2Cmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GChildCode2CmbActionPerformed(evt);
            }
        });

        AppDataSourceTbl = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        AppDataSourceTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        AppDataSourceTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AppDataSourceTblMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(AppDataSourceTbl);

        IdTxt.setText("jTextField1");
        IdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdTxtActionPerformed(evt);
            }
        });

        jLabel1.setText("Sequence :");

        jLabel2.setText("Grand Child Menu 3 :");

        jLabel3.setText("Grand Child Code 3 :");

        GChildMenu3Txt.setText("jTextField1");

        GChildCode3Cmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GChildCode3CmbActionPerformed(evt);
            }
        });

        FunctionOpt.setText("Function Menu List");
        FunctionOpt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FunctionOptMousePressed(evt);
            }
        });
        FunctionOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FunctionOptActionPerformed(evt);
            }
        });

        ProductOpt.setText("Product Menu List");
        ProductOpt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ProductOptMousePressed(evt);
            }
        });
        ProductOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductOptActionPerformed(evt);
            }
        });

        FunctionCodeCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FunctionCodeCmbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(FunctionOpt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ProductOpt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SequenceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(FunctionCodeCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MainModuleTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FunctionMapTxt)
                                    .addComponent(SubModuleTxt)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(GChildMenu3Txt)
                                    .addComponent(GChildMenu2Txt, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                    .addComponent(GChildMenu1Txt)
                                    .addComponent(ChildMenuTxt)
                                    .addComponent(SubMenuTxt)
                                    .addComponent(MainMenuTxt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SubCodeCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ChildCodeCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(GChildCode1Cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(GChildCode2Cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(GChildCode3Cmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MainCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(TestCaseIdCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UserTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UserCodeCmb, 0, 172, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(ProjCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProjDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(654, 654, 654))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ChangeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(SaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(ProjCodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProjDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(TestCaseIdCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(UserTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(MainModuleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(SubModuleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(FunctionMapTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FunctionCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FunctionOpt)
                    .addComponent(ProductOpt)
                    .addComponent(jLabel1)
                    .addComponent(SequenceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(MainMenuTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(MainCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(SubMenuTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SubCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(ChildMenuTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33)
                    .addComponent(ChildCodeCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(GChildMenu1Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(GChildCode1Cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(GChildMenu2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37)
                    .addComponent(GChildCode2Cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(GChildMenu3Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(GChildCode3Cmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChangeBtn)
                    .addComponent(BackBtn)
                    .addComponent(SaveBtn)
                    .addComponent(CancelBtn)
                    .addComponent(DeleteBtn)
                    .addComponent(NewBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        ProjCodeTxt.setText(MainGUI.getProjectCode());
        ProjDescTxt.setText(MainGUI.getProjectDesc());
        
        loadAppDataSourceTbl();
        loadTestCaseIdCmb();
        //loadFunctionCodeCmb();
        DefaultSettings();
        int menulvl = 0;
        
        String ProjCode = ProjCodeTxt.getText();
        if(FunctionOpt.isSelected() == true){
            loadMainMenuList(ProjCode);
            loadChildMenuList(ProjCode, 1);
            loadChildMenuList(ProjCode, 2);
            loadChildMenuList(ProjCode, 3);
            loadChildMenuList(ProjCode, 4);
            loadChildMenuList(ProjCode, 5);
        }
        
        loadUserCodeList(ProjCode);
        loadFunctionCodeLst(ProjCode);
        
        display();
    }//GEN-LAST:event_formWindowOpened

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        // TODO add your handling code here:
        JFrame jFrame = new JFrame();
        try{
            //Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            //CallableStatement cs = conn.prepareCall("{call Delete_AppDataSource ()}");
            int RecordId = Integer.parseInt(IdTxt.getText());
            String ProjCode = ProjCodeTxt.getText();
            String TestCaseId = TestCaseIdCmb.getSelectedItem().toString();
            int SequenceNum = Integer.parseInt(SequenceTxt.getText());
            
            if(DeleteRecord(RecordId, ProjCode, TestCaseId)){
                //SearchGreater_Decrease(String givenProjCode, String givenTestCaseId, int givenSequence)
                if(SearchGreater_Decrease(ProjCode, TestCaseId, SequenceNum)){
                    JOptionPane.showMessageDialog(jFrame, "Record has been successfully deleted", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                    loadAppDataSourceTbl_ByProjCodeTestCaseId(ProjCode, TestCaseId);
                    DefaultSettings();
                }
            }
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Record Deleting Failed " + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                 
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        ExecutePage execPage = new ExecutePage();
        execPage.setVisible(true);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        // TODO add your handling code here:
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_AllAppDataSource_ByIdProjCodeTestCaseId(?,?,?)}");
            int Id = 0;
            String IdNum = IdTxt.getText();
            if(!IdNum.equals("0")){
                Id = Integer.parseInt(IdNum);
            }
            String ProjCode = ProjCodeTxt.getText();
            String TestCaseId = TestCaseIdCmb.getSelectedItem().toString();
            String UserType = UserTypeTxt.getText();
            String UserCode = UserCodeCmb.getSelectedItem().toString();
            String MainModule = MainModuleTxt.getText();
            String SubModule = SubModuleTxt.getText();
            String FunctionCode = FunctionCodeCmb.getSelectedItem().toString();
            String FunctionMap = FunctionMapTxt.getText();
            String MainMenu = MainMenuTxt.getText();
            String MainCode = MainCodeCmb.getSelectedItem().toString();
            String SubMenu = SubMenuTxt.getText();
            String SubCode = SubCodeCmb.getSelectedItem().toString();
            String ChildMenu = ChildMenuTxt.getText();
            String ChildCode = ChildCodeCmb.getSelectedItem().toString();
            String GChildMenu1 = GChildMenu1Txt.getText();
            String GChildCode1 = GChildCode1Cmb.getSelectedItem().toString();
            String GChildMenu2 = GChildMenu2Txt.getText();
            String GChildCode2 = GChildCode2Cmb.getSelectedItem().toString();
            String GChildMenu3 = GChildMenu3Txt.getText();
            String GChildCode3 = GChildCode3Cmb.getSelectedItem().toString();
            String GChildMenu4 = "null";
            String GChildCode4 = "null";
            String GChildMenu5 = "null";
            String GChildCode5 = "null";
            String NvarTemp1 = "null";
            String NvarTemp2 = "null";
            String NvarTemp3 = "null";
            String NvarTemp4 = "null";
            String NvarTemp5 = "null";
            int IntTemp1 = 0;
            int IntTemp2 = 0;
            int IntTemp3 = 0;
            int IntTemp4 = 0;
            int IntTemp5 = 0;
            int SequenceNo = Integer.parseInt(SequenceTxt.getText());
            /*
            String GChildMenu4 = GChildMenu4Txt.getText();
            String GChildCode4 = GChildCode4Cmb.getSelectedItem().toString();
            String GChildMenu5 = GChildMenu5Txt.getText();
            String GChildCode5 = GChildCode5Cmb.getSelectedItem().toString();            
            */
            
            cs.setInt(1, Id);
            cs.setNString(2, ProjCode);
            cs.setNString(3, TestCaseId);
            int response = 0;
            boolean executeflag = false;
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                //Update Mode
                //Id = Integer.parseInt(IdTxt.getText());
                
                response = JOptionPane.showConfirmDialog(jFrame, "Are you sure you want to Change/ Amend the following Record?", "App DataSource - Maintenance", JOptionPane.YES_NO_OPTION);
                if(response == 0){
                    if(validateExistingTestCase(ProjCode, TestCaseId)){
                        boolean UpdateExistingRec = false;
                        //SearchGreaterEqual_Increase(String givenProjCode, String givenTestCaseId, int givenSequence)
                        UpdateExistingRec = SearchGreaterEqual_Increase(ProjCode, TestCaseId, SequenceNo, Id);

                        if(UpdateExistingRec){
                            executeflag = UpdateAppDataSource(Id, ProjCode, TestCaseId, UserType, UserCode, MainModule, SubModule, FunctionCode, FunctionMap, MainMenu, MainCode, 
                                    SubMenu, SubCode, ChildMenu, ChildCode, GChildMenu1, GChildCode1, GChildMenu2, GChildCode2, GChildMenu3, GChildCode3, GChildMenu4, 
                                    GChildCode4, GChildMenu5, GChildCode5, SequenceNo);
                    
                            loadAppDataSourceTbl_ByProjCodeTestCaseId(ProjCode, TestCaseId);                            
                        }
                    }
                }
            }
            else{
                //Insert Mode
                response = JOptionPane.showConfirmDialog(jFrame, "Are you sure you want to Insert the following New Record?", "App DataSource - Maintenance", JOptionPane.YES_NO_OPTION);
                if(response == 0){
                    if(validateExistingTestCase(ProjCode, TestCaseId) == true){
                        //Record Exist
                        //UpdateNextRecord(String givenProjCode, String givenTestCaseId, int givenSequence)
                        executeflag = SearchGreaterEqual_Increase(ProjCode, TestCaseId, SequenceNo, Id);
                        
                        if(executeflag == true){
                        //InsertAppDataSource(String givenProjCode, String givenTestCaseId, String givenUserType, String givenUserCode, 
                                    //String givenMainModule, String givenSubModule,String givenFunctionCode, String givenFunctionMap, String givenMainMenu, String givenMainCode, 
                                    //String givenSubMenu, String givenSubCode, String givenChildMenu, String givenChildCode, String givenGChildMenu1, String givenGChildCode1,
                                    //String givenGChildMenu2, String givenGChildCode2, String givenGChildMenu3, String givenGChildCode3, String givenGChildMenu4, String givenGChildCode4, 
                                    //String givenGChildMenu5, String givenGChildCode5, String givenNvarTemp1,String givenNvarTemp2, String givenNvarTemp3, String givenNvarTemp4, 
                                    //String givenNvarTemp5, int givenIntTemp1, int givenIntTemp2, int givenIntTemp3, int givenIntTemp4, int givenIntTemp5, int givenSequence)                  
                            
                            executeflag = InsertAppDataSource(ProjCode, TestCaseId, UserType, UserCode, MainModule, SubModule, FunctionCode, FunctionMap, MainMenu, MainCode, SubMenu, 
                                SubCode, ChildMenu, ChildCode, GChildMenu1, GChildCode1, GChildMenu2, GChildCode2, GChildMenu3, GChildCode3, GChildMenu4, GChildCode4,
                                GChildMenu5, GChildCode5, NvarTemp1, NvarTemp2, NvarTemp3, NvarTemp4, NvarTemp5, IntTemp1, IntTemp2, IntTemp3, IntTemp4, IntTemp5, SequenceNo);
                            if(executeflag == true){
                                JOptionPane.showMessageDialog(jFrame, "Record has been successfully saved and updated", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                                loadAppDataSourceTbl_ByProjCodeTestCaseId(ProjCode, TestCaseId);
                            }
                            else{
                                JOptionPane.showMessageDialog(jFrame, "Record saving failed", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                                loadAppDataSourceTbl_ByProjCodeTestCaseId(ProjCode, TestCaseId);
                            }
                        }
                    }
                    else{
                        //Balikan mo mamaya!!!
                        //executeflag = InsertAppDataSource();       
                        executeflag = InsertAppDataSource(ProjCode, TestCaseId, UserType, UserCode, MainModule, SubModule, FunctionCode, FunctionMap, MainMenu, MainCode, SubMenu, 
                                SubCode, ChildMenu, ChildCode, GChildMenu1, GChildCode1, GChildMenu2, GChildCode2, GChildMenu3, GChildCode3, GChildMenu4, GChildCode4,
                                GChildMenu5, GChildCode5, NvarTemp1, NvarTemp2, NvarTemp3, NvarTemp4, NvarTemp5, IntTemp1, IntTemp2, IntTemp3, IntTemp4, IntTemp5, SequenceNo);
                        if(executeflag == true){
                            JOptionPane.showMessageDialog(jFrame, "Record has been successfully saved and updated", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                            loadAppDataSourceTbl();
                        }
                        else{
                            JOptionPane.showMessageDialog(jFrame, "Record saving failed", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
            }
            DefaultSettings();
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Record Saving Failed " + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);              
        }
        
    }//GEN-LAST:event_SaveBtnActionPerformed

    private void AppDataSourceTblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AppDataSourceTblMousePressed
        // TODO add your handling code here:
        JFrame jFrame = new JFrame();
        if(evt.getClickCount() == 2){
                try {
                    String ProjCode = ProjCodeTxt.getText();
                    String MainCode = "";
                    String SubCode = "";
                    String ChildCode = "";

                    TableModel tblmodel = AppDataSourceTbl.getModel();
                    int indexRow = AppDataSourceTbl.getSelectedRow();
                    int flag = 0;

                    //{"ID","Test Case ID","User Type","User Code","Main Module","Sub Module","Function Code","Function Map","Main Menu", "Main Code","Sub Menu","Sub Code", "Child Menu","Child Code","Grand Child1 Menu", "Grand Child1 Code", "Grand Child2 Menu", "Grand Child2 Code", "Grand Child3 Menu", "Grand Child3 Code ","Sequence"}

                    IdTxt.setText(tblmodel.getValueAt(indexRow, 0).toString());
                    TestCaseIdCmb.setSelectedItem(tblmodel.getValueAt(indexRow, 1).toString());
                    UserCodeCmb.setSelectedItem(tblmodel.getValueAt(indexRow, 3).toString());
                    //UserTypeTxt.setText(tblmodel.getValueAt(indexRow, 3).toString());
                    MainModuleTxt.setText(tblmodel.getValueAt(indexRow, 4).toString());
                    SubModuleTxt.setText(tblmodel.getValueAt(indexRow, 5).toString());
                    //FunctionCodeTxt.setText(tblmodel.getValueAt(indexRow, 6).toString());
                    FunctionCodeCmb.setSelectedItem(tblmodel.getValueAt(indexRow, 6));

                    //MainMenuTxt.setText(tblmodel.getValueAt(indexRow, 7).toString());
                    MainCode = tblmodel.getValueAt(indexRow,9).toString();
                    if(!MainCode.equals("null")){
                        flag = validateSelectedMain(ProjCode, MainCode);
                        if(flag == 1){
                            if(FunctionOpt.isSelected() == false){
                                FunctionOpt.setSelected(true);
                                ProductOpt.setSelected(false);
                                loadFuncitonMenuList(ProjCode);
                            }
                        }
                        else if(flag ==2){
                            if(ProductOpt.isSelected() == false){
                                FunctionOpt.setSelected(false);
                                ProductOpt.setSelected(true);
                                loadProductCatalogMenuList(ProjCode);
                            }
                        }
                        MainCodeCmb.setSelectedItem(MainCode);                
                    }
                    else{
                        MainCodeCmb.setSelectedItem("null");
                    }


                    //SubMenuTxt.setText(tblmodel.getValueAt(indexRow, 9).toString());
                    SubCode = tblmodel.getValueAt(indexRow, 11).toString();
                    if(!SubCode.equals("null")){
                        flag = validateSelectedSub(ProjCode, SubCode);
                        if(flag == 1){
                            if(FunctionOpt.isSelected() == false){
                                FunctionOpt.setSelected(true);
                                ProductOpt.setSelected(false);
                                loadFuncitonMenuList(ProjCode);
                            }
                            else{
                                loadFuncitonMenuList(ProjCode);
                            }
                        }
                        else if(flag ==2){
                            if(ProductOpt.isSelected() == false){
                                FunctionOpt.setSelected(false);
                                ProductOpt.setSelected(true);
                                loadProductCatalogMenuList(ProjCode);
                            }
                        }            
                        SubCodeCmb.setSelectedItem(SubCode);                
                    }
                    else{
                        SubCodeCmb.setSelectedItem("null");
                    }


                    //ChildMenuTxt.setText(tblmodel.getValueAt(indexRow, 11).toString());
                    ChildCode = tblmodel.getValueAt(indexRow,13).toString();
                    if(!ChildCode.equals("null")){
                        flag = validateSelectedChild(ProjCode, ChildCode);
                        if(flag == 1){
                            if(FunctionOpt.isSelected() == false){
                                FunctionOpt.setSelected(true);
                                ProductOpt.setSelected(false);              
                                loadFuncitonMenuList(ProjCode);
                            }
                        }
                        else if(flag ==2){
                            if(ProductOpt.isSelected() == false){
                                FunctionOpt.setSelected(false);
                                ProductOpt.setSelected(true);
                                loadProductCatalogMenuList(ProjCode);
                            }
                        }            
                        ChildCodeCmb.setSelectedItem(ChildCode);                
                    }
                    else{
                        ChildCodeCmb.setSelectedItem("null");
                    }

                    //GChildMenu1Txt.setText(tblmodel.getValueAt(indexRow, 13).toString());
                    GChildCode1Cmb.setSelectedItem(tblmodel.getValueAt(indexRow,15).toString());
                    //GChildMenu2Txt.setText(tblmodel.getValueAt(indexRow, 15).toString());
                    GChildCode2Cmb.setSelectedItem(tblmodel.getValueAt(indexRow, 17).toString());
                    //GChildMenu3Txt.setText(tblmodel.getValueAt(indexRow, 17).toString());
                    GChildCode3Cmb.setSelectedItem(tblmodel.getValueAt(indexRow, 19).toString());
                    SequenceTxt.setText(tblmodel.getValueAt(indexRow, 20).toString());

                    DeleteChangeCancel_Enabled();
                }
                catch(Exception ex){
                        String errMessage = null;

                        errMessage = "Error Message: " + ex.getMessage() + 
                           "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                           "\n" + "Stack Trace: " + ex.getStackTrace() + 
                           "\n" + "Cause: " + ex.getCause();

                        System.out.println(errMessage);

                        //if(execFlag <= 0 ){
                        JOptionPane.showMessageDialog(jFrame,  "Record Selecting  Failed " + 
                                       "\n" + errMessage, "App DataSource - Maintenance", 0);              
                }
        }

    }//GEN-LAST:event_AppDataSourceTblMousePressed

    private void loadFuncitonMenuList(String givenProjCode){
        loadMainMenuList(givenProjCode);
        loadChildMenuList(givenProjCode, 1);
        loadChildMenuList(givenProjCode, 2);
        loadChildMenuList(givenProjCode, 3);
        loadChildMenuList(givenProjCode, 4);
        loadChildMenuList(givenProjCode, 5);        
    }
    
    private void loadProductCatalogMenuList(String givenProjCode){
        loadProductCatalog_CategoryList(givenProjCode);
        loadProductCatalog_GroupList(givenProjCode);
        loadProductCatalog_ProductList(givenProjCode);
        clearAllMenuCmb(3);
        GChildCode1Cmb.addItem("null");
        clearAllMenuCmb(4);
        GChildCode2Cmb.addItem("null");
        clearAllMenuCmb(5);          
        GChildCode3Cmb.addItem("null");
        
    }
    
    private void FunctionOptMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FunctionOptMousePressed
        // TODO add your handling code here:
        /*
        if(FunctionOpt.isSelected() == true){
            ProductOpt.setSelected(false);
        }
        */
    }//GEN-LAST:event_FunctionOptMousePressed

    private void ProductOptMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductOptMousePressed
        // TODO add your handling code here:
        /*
        if(ProductOpt.isSelected() == true){
            FunctionOpt.setSelected(false);
        }
        */
    }//GEN-LAST:event_ProductOptMousePressed

    private void FunctionOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FunctionOptActionPerformed
        // TODO add your handling code here:
        if(FunctionOpt.isSelected() == true){
            ProductOpt.setSelected(false);
            String ProjCode = ProjCodeTxt.getText();
            
            loadMainMenuList(ProjCode);
            loadChildMenuList(ProjCode, 1);
            loadChildMenuList(ProjCode, 2);
            loadChildMenuList(ProjCode, 3);
            loadChildMenuList(ProjCode, 4);
            loadChildMenuList(ProjCode, 5);
            
        }        
        else{
            FunctionOpt.setSelected(true);
        }
        
    }//GEN-LAST:event_FunctionOptActionPerformed

    private void ProductOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductOptActionPerformed
        // TODO add your handling code here:
        if(ProductOpt.isSelected() == true){
            FunctionOpt.setSelected(false);
            String ProjCode = ProjCodeTxt.getText();
            /*
            loadProductCatalog_CategoryList(ProjCode);
            loadProductCatalog_GroupList(ProjCode);
            loadProductCatalog_ProductList(ProjCode);
            clearAllMenuCmb(3);
            clearAllMenuCmb(4);
            clearAllMenuCmb(5);
            */
            loadProductCatalogMenuList(ProjCode);
        }   
        else{
            ProductOpt.setSelected(true);
        }
    }//GEN-LAST:event_ProductOptActionPerformed

    private void MainCodeCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainCodeCmbActionPerformed
        // TODO add your handling code here:
        String ProjCode = ProjCodeTxt.getText();
        String MenuCode = MainCodeCmb.getSelectedItem().toString();
        
        if(FunctionOpt.isSelected() == true){
            MainMenuTxt.setText(getMainMenuField(ProjCode, MenuCode));
            if(!MenuCode.equals("null")){
                loadChildMenuList_ByParent(ProjCode, MenuCode, 1);
            }
        }
        else if(ProductOpt.isSelected() == true){
            MainMenuTxt.setText(getCategoryField(ProjCode, MenuCode));
        }

        
    }//GEN-LAST:event_MainCodeCmbActionPerformed

    private void SubCodeCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubCodeCmbActionPerformed
        // TODO add your handling code here:
        String ProjCode = ProjCodeTxt.getText();
        String UserCode = UserCodeCmb.getSelectedItem().toString();
        //String MenuCode = SubCodeCmb.getSelectedItem().toString();        
        String MenuCode = SubCodeCmb.getSelectedItem().toString();
        
        if(FunctionOpt.isSelected() == true){
            SubMenuTxt.setText(getChildMenuField(ProjCode, MenuCode));
            if(!MenuCode.equals("null")){
                loadChildMenuList_ByParent(ProjCode, MenuCode, 1);
            }
            //if(!MenuCode.equals("null")){
                //DefaultComboBoxModel cmbmodel = new DefaultComboBoxModel();
                //ChildCodeCmb.setModel(cmbmodel);
                //ArrayList<String> arrlist = new ArrayList<String>();
                //arrlist = getFunctionChildMenuList_FromParent(ProjCode, UserCode, MenuCode);
                //for(int i=1; i >= arrlist.size(); i++){
                //    ChildCodeCmb.addItem(arrlist.get(i));
                //}
            //}        
        }
        else if(ProductOpt.isSelected() == true){
            SubMenuTxt.setText(getGroupField(ProjCode, MenuCode));
        }
    }//GEN-LAST:event_SubCodeCmbActionPerformed

    private void ChildCodeCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChildCodeCmbActionPerformed
        // TODO add your handling code here:
        String ProjCode = ProjCodeTxt.getText();
        String UserCode = UserCodeCmb.getSelectedItem().toString();
        String MenuCode = ChildCodeCmb.getSelectedItem().toString();        

        if(FunctionOpt.isSelected() == true){
            ChildMenuTxt.setText(getChildMenuField(ProjCode, MenuCode));
            if(!MenuCode.equals("null")){
                loadChildMenuList_ByParent(ProjCode, MenuCode, 3);
                /*
                DefaultComboBoxModel cmbmodel = new DefaultComboBoxModel();
                GChildCode1Cmb.setModel(cmbmodel);
                ArrayList<String> arrlist = new ArrayList<String>();
                arrlist = getFunctionChildMenuList_FromParent(ProjCode, UserCode, MenuCode);
                for(int i=1; i >= arrlist.size(); i++){
                    GChildCode1Cmb.addItem(arrlist.get(i));
                }
                */
            }
        }
        else if(ProductOpt.isSelected() == true){
            ChildMenuTxt.setText(getProductField(ProjCode, MenuCode));
        }
    }//GEN-LAST:event_ChildCodeCmbActionPerformed

    private void GChildCode1CmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GChildCode1CmbActionPerformed
        // TODO add your handling code here:
        if(FunctionOpt.isSelected() == true){
            String ProjCode = ProjCodeTxt.getText();
            String MenuCode = GChildCode1Cmb.getSelectedItem().toString();
            
            //GChildMenu1Txt.setText(getChildMenuField(ProjCode, MenuCode));
            
            loadChildMenuList_ByParent(ProjCode, MenuCode, 4);
        }        
    }//GEN-LAST:event_GChildCode1CmbActionPerformed

    private void GChildCode2CmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GChildCode2CmbActionPerformed
        // TODO add your handling code here:
        if(FunctionOpt.isSelected() == true){
            String ProjCode = ProjCodeTxt.getText();
            String MenuCode = GChildCode2Cmb.getSelectedItem().toString();
            
            //GChildMenu2Txt.setText(getChildMenuField(ProjCode, MenuCode));
            loadChildMenuList_ByParent(ProjCode, MenuCode, 5);
        }              
    }//GEN-LAST:event_GChildCode2CmbActionPerformed

    private void GChildCode3CmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GChildCode3CmbActionPerformed
        // TODO add your handling code here:
        if(FunctionOpt.isSelected() == true){
            String ProjCode = ProjCodeTxt.getText();
            String MenuCode = GChildCode3Cmb.getSelectedItem().toString();
            //GChildMenu3Txt.setText(getChildMenuField(ProjCode, MenuCode));
            
            loadChildMenuList_ByParent(ProjCode, MenuCode, 6);
        }              
    }//GEN-LAST:event_GChildCode3CmbActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        // TODO add your handling code here:
        DefaultSettings();
        flagmode = 0;
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void NewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBtnActionPerformed
        // TODO add your handling code here:
        CreateNewRecordSettings();
        flagmode = 1;
    }//GEN-LAST:event_NewBtnActionPerformed

    private void UserCodeCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserCodeCmbActionPerformed
        // TODO add your handling code here:
        String ProjCode = ProjCodeTxt.getText();
        String UserCode = UserCodeCmb.getSelectedItem().toString();
        
        UserTypeTxt.setText(getUserType(ProjCode, UserCode));
        
    }//GEN-LAST:event_UserCodeCmbActionPerformed

    private void IdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IdTxtActionPerformed

    private void FunctionCodeCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FunctionCodeCmbActionPerformed
        // TODO add your handling code here:
        String ProjCode = ProjCodeTxt.getText();
        String FuncCode = FunctionCodeCmb.getSelectedItem().toString();
        
        FunctionMapTxt.setText(getFunctionMap(ProjCode, FuncCode));
        
    }//GEN-LAST:event_FunctionCodeCmbActionPerformed

    private void ChangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeBtnActionPerformed
        // TODO add your handling code here:
        SaveCancel_Enabled();
        UpdateExistingRecord();
        flagmode = 2;
    }//GEN-LAST:event_ChangeBtnActionPerformed

    private void TestCaseIdCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestCaseIdCmbActionPerformed
        // TODO add your handling code here:
        String ProjCode = "";
        String TestCaseId = "";
        
        ProjCode = ProjCodeTxt.getText();
        TestCaseId = TestCaseIdCmb.getSelectedItem().toString();
        loadAppDataSourceTbl_ByProjCodeTestCaseId(ProjCode, TestCaseId);
        
    }//GEN-LAST:event_TestCaseIdCmbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppDataSource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppDataSource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppDataSource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppDataSource.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppDataSource().setVisible(true);
            }
        });
    }

    public void loadAppDataSourceTbl(){
            JFrame jFrame = new JFrame();
            try{
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                CallableStatement cs = conn.prepareCall("{call Search_AllAppDataSource_ByProjCode(?)}");
                String ProjCode = ProjCodeTxt.getText();
                cs.setNString(1, ProjCode);
                ResultSet rs = cs.executeQuery();
                /*
                    1-[ID] = AD.ID,
                    2-[PROJCODE] = AD.PROJ_CODE,
                    3-[TESTCASEID] = AD.TESTCASEID,
                    4-[USERTYPE] = AD.USERTYPE,
                    5-[USERCODE] = AD.USER_CODE,
                    6-[MAINMODULE] = AD.MAIN_MODULE,
                    7-[SUBMODULE] = AD.SUB_MODULE,
                    8-[FUNCCODE] = AD.FUNCTION_CODE,
                    9-[FUNCMAP] = AD.FUNCTION_MAP,
                    10-[MAINMENU] = AD.MAIN_MENU,
                    11-[MAINCODE] = AD.MAIN_MENUCODE,
                    12-[SUBMENU] = AD.SUB_MENU,
                    13-[SUBCODE] = AD.SUB_MENUCODE,
                    14-[CHILDMENU] = AD.CHILD_MENU,
                    15-[CHILDCODE] = AD.CHILD_MENUCODE,
                    16-[GCHILDMENU1] = GCHILD1_MENU,
                    17-[GCHILDMENUCODE1] = GCHILD1_MENUCODE,
                    18-[GCHILDMENU2] = GCHILD2_MENU,
                    19-[GCHILDMENUCODE2] = GCHILD2_MENUCODE,
                    20-[GCHILDMENU3] = GCHILD3_MENU,
                    21-[GCHILDMENUCODE3] = GCHILD3_MENUCODE,
                    22-[SEQUENCE] = AD.SEQUENCE          
                */
                AppDataSourceTbl.setModel(new DefaultTableModel(null, new String[]{"ID","Test Case ID","User Type","User Code","Main Module","Sub Module","Function Code","Function Map","Main Menu", "Main Code","Sub Menu","Sub Code", "Child Menu","Child Code","Grand Child1 Menu", "Grand Child1 Code", "Grand Child2 Menu", "Grand Child2 Code", "Grand Child3 Menu", "Grand Child3 Code ","Sequence"}));
                
                while(rs.next()){
                    String id = NumberToTextConverter.toText(rs.getInt(1));
                    //String projcode = rs.getNString(2);
                    String testcaseid = rs.getNString(3);
                    String usertype = rs.getNString(4);
                    String usercode = rs.getNString(5);
                    String mainmodule = rs.getNString(6);
                    String submodule = rs.getNString(7);
                    String funccode = rs.getNString(8);
                    String funcmap = rs.getNString(9);
                    String mainmenu = rs.getNString(10);
                    String maincode = rs.getNString(11);
                    String submenu = rs.getNString(12);
                    String subcode = rs.getNString(13);
                    String childmenu = rs.getNString(14);
                    String childcode = rs.getNString(15);
                    String gchildmenu1 = rs.getNString(16);
                    String gchildcode1 = rs.getNString(17);
                    String gchildmenu2 = rs.getNString(18);
                    String gchildcode2 = rs.getNString(19);
                    String gchildmenu3 = rs.getNString(20);
                    String gchildcode3 = rs.getNString(21);
                    String sequence = NumberToTextConverter.toText(rs.getInt(22));
                    
                    String[] arrtbl = {id, testcaseid, usertype, usercode, mainmodule, submodule, funccode, funcmap, mainmenu, maincode, submenu, subcode, childmenu, childcode, gchildmenu1, gchildcode1, gchildmenu2, gchildcode2, gchildmenu3, gchildcode3, sequence};
                    DefaultTableModel tblmodel = (DefaultTableModel)AppDataSourceTbl.getModel();
                    tblmodel.addRow(arrtbl);
                    
                    AppDataSourceTbl.getColumnModel().getColumn(20).setPreferredWidth(15);
                    
                    AppDataSourceTbl.getColumnModel().getColumn(0).setMinWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(0).setMaxWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(1).setMinWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(1).setMaxWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(2).setMinWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(2).setMaxWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(4).setMinWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(4).setMaxWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(5).setMinWidth(0);
                    AppDataSourceTbl.getColumnModel().getColumn(5).setMaxWidth(0);  
                    
                }
                cs.close();
                conn.close();
                
            }
            catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "App DataSource Load Failed " + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                   
            }
    }
    
    public void loadAppDataSourceTbl_ByProjCodeTestCaseId(String givenProjCode, String givenTestCaseId){
        //Search_AllAppDataSource_ByProjCodeTestCaseId
        
            JFrame jFrame = new JFrame();
            try{
                Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
                CallableStatement cs = conn.prepareCall("{call Search_AllAppDataSource_ByProjCodeTestCaseId(?,?)}");
                //String ProjCode = ProjCodeTxt.getText();
                cs.setNString(1, givenProjCode);
                cs.setNString(2, givenTestCaseId);
                
                ResultSet rs = cs.executeQuery();
                /*
                    1-[ID] = AD.ID,
                    2-[PROJCODE] = AD.PROJ_CODE,
                    3-[TESTCASEID] = AD.TESTCASEID,
                    4-[USERTYPE] = AD.USERTYPE,
                    5-[USERCODE] = AD.USER_CODE,
                    6-[MAINMODULE] = AD.MAIN_MODULE,
                    7-[SUBMODULE] = AD.SUB_MODULE,
                    8-[FUNCCODE] = AD.FUNCTION_CODE,
                    9-[FUNCMAP] = AD.FUNCTION_MAP,
                    10-[MAINMENU] = AD.MAIN_MENU,
                    11-[MAINCODE] = AD.MAIN_MENUCODE,
                    12-[SUBMENU] = AD.SUB_MENU,
                    13-[SUBCODE] = AD.SUB_MENUCODE,
                    14-[CHILDMENU] = AD.CHILD_MENU,
                    15-[CHILDCODE] = AD.CHILD_MENUCODE,
                    16-[GCHILDMENU1] = GCHILD1_MENU,
                    17-[GCHILDMENUCODE1] = GCHILD1_MENUCODE,
                    18-[GCHILDMENU2] = GCHILD2_MENU,
                    19-[GCHILDMENUCODE2] = GCHILD2_MENUCODE,
                    20-[GCHILDMENU3] = GCHILD3_MENU,
                    21-[GCHILDMENUCODE3] = GCHILD3_MENUCODE,
                    22-[SEQUENCE] = AD.SEQUENCE          
                */
                AppDataSourceTbl.setModel(new DefaultTableModel(null, new String[]{"ID","Test Case ID","User Type","User Code","Main Module","Sub Module","Function Code","Function Map","Main Menu", "Main Code","Sub Menu","Sub Code", "Child Menu","Child Code","Grand Child1 Menu", "Grand Child1 Code", "Grand Child2 Menu", "Grand Child2 Code", "Grand Child3 Menu", "Grand Child3 Code ","Sequence"}));
                
                while(rs.next()){
                    String id = NumberToTextConverter.toText(rs.getInt(1));
                    //String projcode = rs.getNString(2);
                    String testcaseid = rs.getNString(3);
                    String usertype = rs.getNString(4);
                    String usercode = rs.getNString(5);
                    String mainmodule = rs.getNString(6);
                    String submodule = rs.getNString(7);
                    String funccode = rs.getNString(8);
                    String funcmap = rs.getNString(9);
                    String mainmenu = rs.getNString(10);
                    String maincode = rs.getNString(11);
                    String submenu = rs.getNString(12);
                    String subcode = rs.getNString(13);
                    String childmenu = rs.getNString(14);
                    String childcode = rs.getNString(15);
                    String gchildmenu1 = rs.getNString(16);
                    String gchildcode1 = rs.getNString(17);
                    String gchildmenu2 = rs.getNString(18);
                    String gchildcode2 = rs.getNString(19);
                    String gchildmenu3 = rs.getNString(20);
                    String gchildcode3 = rs.getNString(21);
                    String sequence = NumberToTextConverter.toText(rs.getInt(22));
                    
                    String[] arrtbl = {id, testcaseid, usertype, usercode, mainmodule, submodule, funccode, funcmap, mainmenu, maincode, submenu, subcode, childmenu, childcode, gchildmenu1, gchildcode1, gchildmenu2, gchildcode2, gchildmenu3, gchildcode3, sequence};
                    DefaultTableModel tblmodel = (DefaultTableModel)AppDataSourceTbl.getModel();
                    tblmodel.addRow(arrtbl);
                    
                    /*
                    0-"ID",
                    1-"Test Case ID",
                    2-"User Type",
                    3-"User Code",
                    4-"Main Module",
                    5-"Sub Module",
                    6-"Function Code",
                    7-"Function Map",
                    8-"Main Menu",
                    9-"Main Code",
                    10-"Sub Menu",
                    11-"Sub Code",
                    12-"Child Menu",
                    13-"Child Code",
                    14-"Grand Child1 Menu",
                    15-"Grand Child1 Code",
                    16-"Grand Child2 Menu",
                    17-"Grand Child2 Code",
                    18-"Grand Child3 Menu",
                    19-"Grand Child3 Code ",
                    20-"Sequence"
                    */

                    
                }
                
                AppDataSourceTbl.getColumnModel().getColumn(20).setPreferredWidth(10);

                AppDataSourceTbl.getColumnModel().getColumn(0).setMinWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(0).setMaxWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(1).setMinWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(1).setMaxWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(2).setMinWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(2).setMaxWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(4).setMinWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(4).setMaxWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(5).setMinWidth(0);
                AppDataSourceTbl.getColumnModel().getColumn(5).setMaxWidth(0);  
                //AppDataSourceTbl.getScrollableTracksViewportWidth(true);
                
                cs.close();
                conn.close();
                
            }
            catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "App DataSource Load Failed " + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                   
            }        
        
    }
    
    public void loadTestCaseIdCmb(){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_AllTestCases(?)}");
            cs.setNString(1, ProjCodeTxt.getText());
            /*
            [TCID] = TC.TESTCASEID,
            [TCDESC] = TC.TESTCASEDESCRIPTION,
            [ITERATION] = TC.ITERATION,
            [EXECUTE] = TC.EXECUTEFLAG,
            [RESULT] = TC.RESULTFLAG,
            [TESTCYCLE] = TC.TEST_CYCLE,
            [TESTRUN] = TC.TEST_RUN,
            [REMARKS] = TC.REMARKS,
            [RCA] = TC.RCA            
            */
            //TestCaseIdCmb.removeAllItems();
            DefaultComboBoxModel cmbmodel = new DefaultComboBoxModel();
            TestCaseIdCmb.setModel(cmbmodel);
            
            ResultSet rs = cs.executeQuery();
            while(rs.next()){
                TestCaseIdCmb.addItem(rs.getNString(1));
            }
            
            cs.close();
            conn.close();
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Test Case List loading failed " + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);              
        }
    }
    
    /*
    public void loadFunctionCodeCmb(){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ProjectFunction_ByProjectCode(?)}");
            String ProjCode = ProjCodeTxt.getText();
            cs.setNString(1, ProjCode);
            
            FunctionCodeCmb.removeAllItems();
            ResultSet rs = cs.executeQuery();
            while(rs.next()){
                
                //[ID] = ID,
                ..[PCODE] = PROJECT_CODE,
                ..[FCODE] = FUNCTION_CODE,
                ..[FNAME] = FUNCTION_NAME                
                
                String FuncCode = rs.getNString(3);
                FunctionCodeCmb.addItem(FuncCode);
                
            }
            cs.close();
            conn.close();
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "App DataSource Load Failed " + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);               
        }
    }
    */

    public void DefaultSettings(){
            IdTxt.setText("0");
            IdTxt.setEnabled(false);
            ProjCodeTxt.setEnabled(false);
            ProjDescTxt.setEnabled(false);
            TestCaseIdCmb.setEnabled(true);
            UserCodeCmb.setEnabled(false);
            UserTypeTxt.setEnabled(false);
            MainModuleTxt.setEnabled(false);
            SubModuleTxt.setEnabled(false);
            //FunctionCodeTxt.setEnabled(false);
            FunctionCodeCmb.setEnabled(false);
            FunctionMapTxt.setEnabled(false);
            MainMenuTxt.setEnabled(false);
            MainCodeCmb.setEnabled(false);
            SubMenuTxt.setEnabled(false);
            SubCodeCmb.setEnabled(false);
            ChildMenuTxt.setEnabled(false);
            ChildCodeCmb.setEnabled(false);
            GChildMenu1Txt.setEnabled(false);
            GChildCode1Cmb.setEnabled(false);
            GChildMenu2Txt.setEnabled(false);
            GChildCode2Cmb.setEnabled(false);           
            GChildMenu3Txt.setEnabled(false);
            GChildCode3Cmb.setEnabled(false);            
            SequenceTxt.setEnabled(false);
            
            FunctionOpt.setSelected(true);
            ProductOpt.setSelected(false);
            
            FunctionOpt.setEnabled(false);
            ProductOpt.setEnabled(false);
            
            NewBtn.setEnabled(true);
            DeleteBtn.setEnabled(false);
            ChangeBtn.setEnabled(false);
            SaveBtn.setEnabled(false);
            CancelBtn.setEnabled(false);
            
            UserTypeTxt.setText("null");
            MainModuleTxt.setText("null");
            SubModuleTxt.setText("null");
            //FunctionCodeTxt.setText("null");
            FunctionMapTxt.setText("null");
            MainMenuTxt.setText("null");
            SubMenuTxt.setText("null");
            ChildMenuTxt.setText("null");
            GChildMenu1Txt.setText("null");
            GChildMenu2Txt.setText("null");
            GChildMenu3Txt.setText("null");
            
    }
    
    public void SelectedRecordSettings(){
            NewBtn.setEnabled(false);
            DeleteBtn.setEnabled(true);
            ChangeBtn.setEnabled(true);
            SaveBtn.setEnabled(false);
            CancelBtn.setEnabled(true);
    }
    
    public void SelectedChangeRecordSettings(){
            IdTxt.setEnabled(false);
            ProjCodeTxt.setEnabled(false);
            ProjDescTxt.setEnabled(false);
            TestCaseIdCmb.setEnabled(true);
            UserCodeCmb.setEnabled(false);
            UserTypeTxt.setEnabled(false);
            MainModuleTxt.setEnabled(true);
            SubModuleTxt.setEnabled(true);
            //FunctionCodeTxt.setEnabled(true);
            FunctionCodeCmb.setEnabled(true);
            FunctionMapTxt.setEnabled(true);
            MainMenuTxt.setEnabled(false);
            MainCodeCmb.setEnabled(true);
            SubMenuTxt.setEnabled(false);
            SubCodeCmb.setEnabled(true);
            ChildMenuTxt.setEnabled(false);
            ChildCodeCmb.setEnabled(true);
            GChildMenu1Txt.setEnabled(false);
            GChildCode1Cmb.setEnabled(true);
            GChildMenu2Txt.setEnabled(false);
            GChildCode2Cmb.setEnabled(true);
            GChildMenu3Txt.setEnabled(false);
            GChildCode3Cmb.setEnabled(true);            
            SequenceTxt.setEnabled(false);
            
            NewBtn.setEnabled(false);
            DeleteBtn.setEnabled(false);
            ChangeBtn.setEnabled(false);
            SaveBtn.setEnabled(true);
            CancelBtn.setEnabled(true);        
    }
    
    private void display(){
        //JFrame f = new JFrame("TestScript");
        //TestScript f = new TestScript();
        //f.setExtendedState(JFrame.MAXIMIZED_BOTH);
        //f.setVisible(true);
        
        if(this.getExtendedState() != AppDataSource.MAXIMIZED_BOTH){
            this.setExtendedState(AppDataSource.MAXIMIZED_BOTH);
            //Toolkit tk = Toolkit.getDefaultToolkit();
            //int xsize = (int) tk.getScreenSize().getWidth();
            //int ysize = (int) tk.getScreenSize().getHeight();
            //this.setSize(xsize, ysize);
        }
        else{
            this.setExtendedState(TestScript.NORMAL);
        }
    }
    
    private void loadMainMenuList(String givenProjCode){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_UserMenuMap_ByProjCode(?)}");
            cs.setNString(1, givenProjCode);
            
            ResultSet rs = cs.executeQuery();
            
            /*
            1-[ID] = MAP.ID,
            2-[USERCODE] = MAP.USER_CODE,
            3-[MAINCODE] = MAP.MAIN_CODE,
            4-[MODULE] = MAP.PAGE_MODULE,
            5-[FIELD] = MAP.PAGE_FIELD,
            6-[ELEMENTID] = MAP.ELEMENT_ID,
            7-[ELEMENTXPATH] = MAP.ELEMENT_XPATH,
            8-[LINK] = MAP.LINK_VALUE,
            9-[URL] = MAP.PAGE_URL,
            10-[TITLE] = MAP.PAGE_TITLE,
            [ELEMENTTYPE] = MAP.ELEMENT_TYPE,
            [ELEMENTVALUE] = MAP.ELEMENT_VALUE,
            [ELEMENTACTION] = MAP.ELEMENT_ACTION,
            [MENUREF] = MAP.MENU_REFERENCE,
            [WORKSHEETREF] = MAP.WORKSHEET_REFERENCE,
            [FIELDREF] = MAP.FIELD_REFERENCE,
            [ELEMENTMSG] = MAP.ELEMENT_MESSAGE,
            [ELEMENTRESULT] = MAP.ELEMENT_RESULT            
            */
            DefaultComboBoxModel cbModel = new DefaultComboBoxModel();
            MainCodeCmb.setModel(cbModel);
            MainCodeCmb.addItem("null");
            
            while(rs.next()){
                MainCodeCmb.addItem(rs.getNString(3));
            }
            
            rs.close();
            cs.close();
            conn.close();
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Main Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                
        }
    }
    
    private void loadChildMenuList(String givenProjCode, int givenMenuLvl){
        //Search_MenuTestScripMenuCode_ByMenuLvl
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_MenuTestScripMenuCode_ByProjCode(?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setInt(2, givenMenuLvl);
            
            ResultSet rs = cs.executeQuery();
            
            Statement s = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet r = s.executeQuery("EXECUTE Search_MenuTestScripMenuCode_ByProjCode " + givenProjCode + "," + givenMenuLvl );
            
            r.last();
            int rsCount = r.getRow() + 1;
            
            //clearAllMenuCmb(givenMenuLvl);
            int ctr = 1;
            String[] cmbList = new String[rsCount];
            
            cmbList[0] = "null";
            while(rs.next()){
                /*
                1-MENU_CODE,
                2-PAGE_FIELD,
                3-MENU_LVL,
                4-SEQUENCE                
                */

                String MenuCode = rs.getNString(1);
                String PageField = rs.getNString(2);
                //cmbList.add(MenuCode);
                
                cmbList[ctr] = MenuCode;
                ctr++;
                /*
                if(rsCount == ctr){
                    break;
                }
                 else{
                     ctr++;
                 }
                */
            }
            
            System.out.println(ctr);
            
            DefaultComboBoxModel cmbModel = new DefaultComboBoxModel();
            cmbModel.addElement(cmbList);

            switch (givenMenuLvl){
                case 1:
                    //SubCodeCmb.addItem(MenuCode);
                    //cmbModel.addElement(cmbList);
                    SubCodeCmb.setModel(new DefaultComboBoxModel(cmbList));
                    break;

                case 2:
                    //ChildCode1Cmb
                    //cmbModel.addElement(cmbList);
                    ChildCodeCmb.setModel(new DefaultComboBoxModel(cmbList));
                    break;

                case 3:
                    //GChildCode1Cmb.
                    //cmbModel.addElement(cmbList);
                    GChildCode1Cmb.setModel(new DefaultComboBoxModel(cmbList));
                    break;

                case 4:
                    ////GChildCode2Cmb.
                    //cmbModel.addElement(cmbList);
                    GChildCode2Cmb.setModel(new DefaultComboBoxModel(cmbList));
                    break;

                case 5:
                    //GChildCode3Cmb.
                    //cmbModel.addElement(cmbList);
                    GChildCode3Cmb.setModel(new DefaultComboBoxModel(cmbList));
                    break;            
            }
            
            rs.close();
            cs.close();
            conn.close();
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Menu Level : " + NumberToTextConverter.toText(givenMenuLvl) + ", " + "Populate Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);              
        }
    }
    
    private void loadChildMenuList_ByParent(String givenProjCode, String givenParentCode, int givenMenuLvl){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            Statement s = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            String givenStrMenuLvl = NumberToTextConverter.toText(givenMenuLvl);
            String spCommand = "EXECUTE Search_MenuTestScripMenuCode_ByProjCodeMainCodeMenuLvl " + "'" + givenProjCode + "'" + "," +  "'" + givenParentCode + "'" + "," + "'" + givenStrMenuLvl + "'";
            ResultSet r = s.executeQuery(spCommand);
            
            r.last();
            int ctr = 1;
            int rCount = r.getRow() + 1;
            String[] mlist = new String[rCount];
            r.beforeFirst();
            
            mlist[0] = "null";
            while(r.next()){
                String SubCode = r.getNString(1);
                mlist[ctr] = SubCode;
                ctr++;
            }
            r.close();
            s.close();
            conn.close();
            
            switch(givenMenuLvl){
//                case 1:
//                    SubCodeCmb.setModel(new DefaultComboBoxModel(mlist));                    
//                    break;

                case 1:
                    ChildCodeCmb.setModel(new DefaultComboBoxModel(mlist));
                    break;
                    
                case 2:
                    GChildCode1Cmb.setModel(new DefaultComboBoxModel(mlist));
                    break;
                    
                case 3:
                    GChildCode2Cmb.setModel(new DefaultComboBoxModel(mlist));
                    break;
                    
                case 4:
                    GChildCode3Cmb.setModel(new DefaultComboBoxModel(mlist));
                    break;
            }

            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Menu Level : " + NumberToTextConverter.toText(givenMenuLvl) + ", " + "Populate Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);               
        }
        
    }
    
    private void clearAllMenuCmb(int MenuLvl){
        JFrame jFrame = new JFrame();
        try{
                int itemCount = 0;
                //DefaultComboBoxModel cbModel = new DefaultComboBoxModel();

                switch(MenuLvl){
                    case 1:
                        //SubCodeCmb.setModel(cbModel);
                        SubCodeCmb.setModel(new DefaultComboBoxModel());
                        //SubCodeCmb.addItem("null");
                        break;

                    case 2:
                        ChildCodeCmb.setModel(new DefaultComboBoxModel());
                        //ChildCodeCmb.addItem("null");
                        break;

                    case 3:
                        GChildCode1Cmb.setModel(new DefaultComboBoxModel());
                        //GChildCode1Cmb.addItem("null");
                        break;

                    case 4:
                        GChildCode2Cmb.setModel(new DefaultComboBoxModel());
                        //GChildCode2Cmb.addItem("null");
                        break;

                    case 5:
                        GChildCode3Cmb.setModel(new DefaultComboBoxModel());
                        //GChildCode3Cmb.addItem("null");
                        break;
                }            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Product Catalog - Category Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                   
        }
        

    }
    
    private void loadProductCatalog_CategoryList(String givenProjCode){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_CategoryMenuMap_ByProjCode(?)}");
            cs.setNString(1, givenProjCode);
            
            ResultSet rs = cs.executeQuery();
            
            DefaultComboBoxModel cbModel = new DefaultComboBoxModel();
            MainCodeCmb.setModel(cbModel);
            MainCodeCmb.addItem("null");
            
            while(rs.next()){
                /*
                1-CM.ID,
                2-CM.PROJ_CODE,
                3-CM.USER_CODE,
                4-CM.CATEGORY_ID,
                5-CM.SUB_MENUCODE,
                6-CM.MODULE,
                7-CM.FIELD_ID,
                8-CM.ELEMENT_ID,
                9-CM.ELEMENT_XPATH,
                10-CM.ELEMENT_TYPE,
                11-CM.ELEMENT_ACTION       
                */

                //cbModel.addElement(rs.getNString(4));
                //cbModel.addItem(rs.getNString(4));
                MainCodeCmb.addItem(rs.getNString(4));
            }
            
            //MainCodeCmb = new JComboBox(cbModel);
            //MainCodeCmb.setModel(cbModel);
            
            rs.close();
            cs.close();
            conn.close();
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Product Catalog - Category Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                          
        }
    }
    
    private void loadProductCatalog_GroupList(String givenProjCode){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_GroupMenuMap_ByProjCode(?)}");
            cs.setNString(1, givenProjCode);
            
            ResultSet rs = cs.executeQuery();
            
            DefaultComboBoxModel cbModel = new DefaultComboBoxModel();
            SubCodeCmb.setModel(cbModel);
            SubCodeCmb.addItem("null");
            
            while(rs.next()){
                /*
                1-GM.ID,
                2-GM.PROJ_CODE,
                3-GM.USER_CODE,
                4-GM.CATEGORY_ID,
                5-GM.GROUP_ID,
                6-GM.MODULE,
                7-GM.FIELD_ID,
                8-GM.ELEMENT_ID,
                9-GM.ELEMENT_XPATH,
                10-GM.ELEMENT_TYPE,
                11-GM.ELEMENT_ACTION              
                */
                SubCodeCmb.addItem(rs.getNString(5));
            }
            rs.close();
            cs.close();
            conn.close();
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Product Catalog - Group Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                          
        }    
    }
    
    private void loadProductCatalog_ProductList(String givenProjCode){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ProductMenuMap_ByProjCode(?)}");
            cs.setNString(1, givenProjCode);
            
            ResultSet rs = cs.executeQuery();
            
            DefaultComboBoxModel cbModel = new DefaultComboBoxModel();
            ChildCodeCmb.setModel(cbModel);
            ChildCodeCmb.addItem("null");
            
            while(rs.next()){
                /*
                1-PM.ID,
                2-PM.PROJ_CODE,
                3-PM.USER_CODE,
                4-PM.GROUP_ID,
                5-PM.GRPMENU_CODE,
                6-PM.MODULE,
                7-PM.FIELD_ID,
                8-PM.ELEMENT_ID,
                9-PM.ELEMENT_XPATH,
                10-PM.ELEMENT_TYPE,
                11-PM.ELEMENT_ACTION          
                */
                ChildCodeCmb.addItem(rs.getNString(5));
            }
            rs.close();
            cs.close();
            conn.close();
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Product Catalog - Product Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                          
        }            
    }
    
    private static String getMainMenuField(String givenProjCode, String givenMenuCode){
        JFrame jFrame = new JFrame();
        String returnValue = "null";
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_MenuField_ByProjCodeMenuCode(?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenMenuCode);
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                /*
                [MAINCODE] = MAP.MAIN_CODE,
                [FIELD] = MAP.PAGE_FIELD                
                */
                returnValue = rs.getNString(2);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return returnValue;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Product Catalog - Product Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                
                return returnValue;
        }
    }
    
    private static String getChildMenuField(String givenProjCode, String givenMenuCode){
        JFrame jFrame = new JFrame();
        String returnValue = "null";
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ChildMenuField_ByProjCodeMenuCode(?,?)}");

            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenMenuCode);
            
            ResultSet rs = cs.executeQuery();
            while(rs.next()){
                /*
                [MENUCODE] = MT.MENU_CODE,
                [FIELD] = MT.PAGE_FIELD                
                */
                returnValue = rs.getNString(2);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return returnValue;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Menu Field Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                          
            
            
            return returnValue;
            
        }
    }
    
    private static String getCategoryField(String givenProjCode, String givenCategoryId){
        JFrame jFrame = new JFrame();
        String returnValue = "null";
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_CategoryField_ByProjCodeCategoryId(?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenCategoryId);
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                /*
                CM.CATEGORY_ID,
                CM.FIELD_ID                
                */
                returnValue = rs.getNString(2);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return returnValue;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Category Field Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                    
            return returnValue;
        }
    }
    
    private static String getGroupField(String givenProjCode, String givenGroupId){
        JFrame jFrame = new JFrame();
        String returnValue = "null";
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_GroupField_ByProjCodeGroupId(?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenGroupId);
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                /*
                GM.GROUP_ID,
                GM.FIELD_ID                
                */
                returnValue = rs.getNString(2);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return returnValue;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Group Field Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                    
            return returnValue;
        }
    }
    
    private static String getProductField(String givenProjCode, String givenProductId){
        JFrame jFrame = new JFrame();
        String returnValue = "null";
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ProductField_ByProjCodeProductId(?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenProductId);
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                /*
                PM.GRPMENU_CODE,
                PM.FIELD_ID                
                */
                returnValue = rs.getNString(2);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return returnValue;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Product Field Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                    
            return returnValue;
        }
        
    }
    
    private static ArrayList<String> getFunctionChildMenuList_FromParent(String givenProjCode, String givenUserCode, String givenMenuCode){
        JFrame jFrame = new JFrame();
        ArrayList<String> arrlist = new ArrayList<String>();
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_GetChildMenuList_FromSubMenu(?,?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenUserCode);
            cs.setNString(3, givenMenuCode);
            
            DefaultComboBoxModel cmbmodel = new DefaultComboBoxModel();
            //ChildCodeCmb.setModel(cmbmodel);
            
            ResultSet rs = cs.executeQuery();
            while(rs.next()){
                //ChildCodeCmb.addItem(rs.getNString(1));
                arrlist.add(rs.getNString(1));
            }
            rs.close();
            cs.close();
            conn.close();
            
            return arrlist;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Child Menu List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);
                return arrlist;
                
        }
    }
    
    private void CreateNewRecordSettings(){
            IdTxt.setEnabled(false);
            ProjCodeTxt.setEnabled(false);
            ProjDescTxt.setEnabled(false);
            TestCaseIdCmb.setEnabled(true);
            UserCodeCmb.setEnabled(true);
            UserTypeTxt.setEnabled(false);
            MainModuleTxt.setEnabled(true);
            SubModuleTxt.setEnabled(true);
            //FunctionCodeTxt.setEnabled(true);
            FunctionCodeCmb.setEnabled(true);
            FunctionMapTxt.setEnabled(false);
            MainMenuTxt.setEnabled(false);
            MainCodeCmb.setEnabled(true);
            SubMenuTxt.setEnabled(false);
            SubCodeCmb.setEnabled(true);
            ChildMenuTxt.setEnabled(false);
            ChildCodeCmb.setEnabled(true);
            GChildMenu1Txt.setEnabled(false);
            GChildCode1Cmb.setEnabled(true);
            GChildMenu2Txt.setEnabled(false);
            GChildCode2Cmb.setEnabled(true);            
            GChildMenu3Txt.setEnabled(false);
            GChildCode3Cmb.setEnabled(true);                        
            SequenceTxt.setEnabled(true);
            
            FunctionOpt.setSelected(true);
            ProductOpt.setSelected(false);
            
            FunctionOpt.setEnabled(true);
            ProductOpt.setEnabled(true);
            
            NewBtn.setEnabled(false);
            DeleteBtn.setEnabled(false);
            ChangeBtn.setEnabled(false);
            SaveBtn.setEnabled(true);
            CancelBtn.setEnabled(true);        
            
            IdTxt.setText("0");
            MainModuleTxt.setText("null");
            SubModuleTxt.setText("null");
            //FunctionCodeTxt.setText("null");
            FunctionMapTxt.setText("null");
            MainMenuTxt.setText("null");
            SubMenuTxt.setText("null");
            ChildMenuTxt.setText("null");
            GChildMenu1Txt.setText("null");
            GChildMenu2Txt.setText("null");
            GChildMenu3Txt.setText("null");                     
            SequenceTxt.setText("null");            

    }
    
    private void UpdateExistingRecord(){
            IdTxt.setEnabled(false);
            ProjCodeTxt.setEnabled(false);
            ProjDescTxt.setEnabled(false);
            TestCaseIdCmb.setEnabled(false);
            UserCodeCmb.setEnabled(true);
            UserTypeTxt.setEnabled(true);
            MainModuleTxt.setEnabled(true);
            SubModuleTxt.setEnabled(true);
            //FunctionCodeTxt.setEnabled(true);
            FunctionCodeCmb.setEnabled(true);
            FunctionMapTxt.setEnabled(false);
            MainMenuTxt.setEnabled(false);
            MainCodeCmb.setEnabled(true);
            SubMenuTxt.setEnabled(false);
            SubCodeCmb.setEnabled(true);
            ChildMenuTxt.setEnabled(false);
            ChildCodeCmb.setEnabled(true);
            GChildMenu1Txt.setEnabled(false);
            GChildCode1Cmb.setEnabled(true);
            GChildMenu2Txt.setEnabled(false);
            GChildCode2Cmb.setEnabled(true);            
            GChildMenu3Txt.setEnabled(false);
            GChildCode3Cmb.setEnabled(true);                        
            SequenceTxt.setEnabled(true);
            
            FunctionOpt.setSelected(true);
            ProductOpt.setSelected(false);
            
            FunctionOpt.setEnabled(true);
            ProductOpt.setEnabled(true);        
    }
    
    private void loadUserCodeList(String givenProjCode){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_TDDUserLst_ByProjCode(?)}");
            
            cs.setNString(1, givenProjCode);
            
            ResultSet rs = cs.executeQuery();
            DefaultComboBoxModel cbmodel = new DefaultComboBoxModel();
            UserCodeCmb.setModel(cbmodel);
            
            while(rs.next()){
                UserCodeCmb.addItem(rs.getNString(1));
            }
            rs.close();
            cs.close();
            conn.close();
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate User Code List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                   
        }
    }
    
    private static String getUserType(String givenProjCode, String givenUserCode){
        JFrame jFrame = new JFrame();
        String returnValue = "null";
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_TDDUser_ByProjCodeUserCode(?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenUserCode);
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                /*
                1-[ID] = TU.ID,
                2-[PROJ_CODE] = TU.PROJECT_CODE,
                3-[CODE] = TU.USER_CODE,
                4-[NAME] = TU.USER_NAME,
                5-[TYPE] = TU.USER_TYPE,
                6-[FIELD_LOGIN] = TU.FIELD_LOGIN,
                7-[LOGIN] = TU.APP_LOGIN,
                8-[FIELD_PASSWORD] = TU.FIELD_PASSWORD,
                9-[PASSWORD] = TU.APP_PASSWORD                
                */
                returnValue = rs.getNString(5);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return returnValue;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate User Code List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);         
                
                return returnValue;
        }
    }
    
    private void loadFunctionCodeLst(String givenProjCode){
        JFrame jFrame = new JFrame();
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ProjectFunction_ByProjectCode(?)}");
            cs.setNString(1, givenProjCode);
            
            ResultSet rs = cs.executeQuery();
            DefaultComboBoxModel cbmodel = new DefaultComboBoxModel();
            FunctionCodeCmb.setModel(cbmodel);
            FunctionCodeCmb.addItem("null");
            
            while(rs.next()){
                /*
                1-[ID] = ID,
                2-[PCODE] = PROJECT_CODE,
                3-[FCODE] = FUNCTION_CODE,
                4-[FNAME] = FUNCTION_NAME                
                */
                
                FunctionCodeCmb.addItem(rs.getNString(3));
            }
            
            rs.close();
            cs.close();
            conn.close();
            
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Function Code List Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                    
        }
        
    }
    
    private static String getFunctionMap(String givenProjCode, String givenFunctionCode){
        JFrame jFrame = new JFrame();
        String returnValue = "null";
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_ProjectFunction_ByProjCodeFuncCode(?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenFunctionCode);
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                /*
                1-[ID] = ID,
                2-[PCODE] = PROJECT_CODE,
                3-[FCODE] = FUNCTION_CODE,
                4-[FNAME] = FUNCTION_NAME                
                */
                returnValue = rs.getNString(4);
            }
            
            rs.close();
            cs.close();
            conn.close();
            
            return returnValue;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Function Map Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                 
            return returnValue;
        }
    }

    private static int validateSelectedMain(String givenProjCode, String givenMainCode){
        JFrame jFrame = new JFrame();
        int result = 0;
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Select_ValidateMainCode_ByProjCodeMainCode(?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenMainCode);
            
            ResultSet rs = cs.executeQuery();
            
            if(rs.next()){
                result = rs.getInt(1);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Main Code Flag Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                 
       
            return result;
        }
    }
    
    private static int validateSelectedSub(String givenProjCode, String givenSubCode){
        JFrame jFrame = new JFrame();
        int result = 0;
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Select_ValidateSubCode_ByProjCodeMainCode(?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenSubCode);
            
            ResultSet rs = cs.executeQuery();
            
            if(rs.next()){
                result = rs.getInt(1);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Sub Code Flag Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                     
            return result;
        }
    }
    
    private static int validateSelectedChild(String givenProjCode, String givenChildCode){
        JFrame jFrame = new JFrame();
        int result = 0;
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Select_ValidateChildCode_ByProjCodeMainCode(?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenChildCode);
            
            ResultSet rs = cs.executeQuery();
            
            if(rs.next()){
                result = rs.getInt(1);
            }
            rs.close();
            cs.close();
            conn.close();
            
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Populate Child Code Flag Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                     
            return result;
        }        
    }
    
    private void DeleteChangeCancel_Enabled(){
            NewBtn.setEnabled(false);
            DeleteBtn.setEnabled(true);
            ChangeBtn.setEnabled(true);
            SaveBtn.setEnabled(false);
            CancelBtn.setEnabled(true);        
    }
    
    private void SaveCancel_Enabled(){
            NewBtn.setEnabled(false);
            DeleteBtn.setEnabled(false);
            ChangeBtn.setEnabled(false);
            SaveBtn.setEnabled(true);
            CancelBtn.setEnabled(true);            
    }
    
    private static boolean UpdateAppDataSource(int givenId, String givenProjCode, String givenTestCaseId, String givenUserType, String givenUserCode, 
            String givenMainModule, String givenSubModule,String givenFunctionCode, String givenFunctionMap, String givenMainMenu, String givenMainCode, 
            String givenSubMenu, String givenSubCode, String givenChildMenu, String givenChildCode, String givenGChildMenu1, String givenGChildCode1,
            String givenGChildMenu2, String givenGChildCode2, String givenGChildMenu3, String givenGChildCode3, String givenGChildMenu4, String givenGChildCode4, 
            String givenGChildMenu5, String givenGChildCode5, Integer givenSequence){
        
        JFrame jFrame = new JFrame();
        boolean result = false;
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call UPDATE_APPDATASOURCE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            
            /*
	1-@id  INT,
	2-@proj_code NVARCHAR(20),
	3-@testcaseid  NVARCHAR(12),
	4-@usertype  NVARCHAR(10),
	5-@user_code NVARCHAR(20),
	6-@main_module  NVARCHAR(50),
	7-@sub_module  NVARCHAR(50),
	8-@function_code  NVARCHAR(20),
	9-@function_map NVARCHAR(100),
	10-@main_menu  NVARCHAR(100),
	11-@main_menucode NVARCHAR(50),
	12-@sub_menu  NVARCHAR(100),
	13-@sub_menucode NVARCHAR(50),
	14-@child_menu  NVARCHAR(100),
	15-@child_menucode NVARCHAR(50),
	16-@gchild1_menu NVARCHAR(100),
	17-@gchild1_menucode NVARCHAR(50),
	18-@gchild2_menu NVARCHAR(100),
	19-@gchild2_menucode NVARCHAR(50),
	20-@gchild3_menu NVARCHAR(100),
	21-@gchild3_menucode NVARCHAR(50),
	22-@gchild4_menu NVARCHAR(100),
	23-@gchild4_menucode NVARCHAR(50),
	24-@gchild5_menu NVARCHAR(100),
	25-@gchild5_menucode NVARCHAR(50),
            	26-@sequence INT
            */
            
            cs.setInt(1, givenId);
            cs.setNString(2, givenProjCode);
            cs.setNString(3, givenTestCaseId);
            cs.setNString(4, givenUserType);
            cs.setNString(5, givenUserCode);
            cs.setNString(6, givenMainModule);
            cs.setNString(7, givenSubModule);
            cs.setNString(8, givenFunctionCode);
            cs.setNString(9, givenFunctionMap);
            cs.setNString(10, givenMainMenu);
            cs.setNString(11, givenMainCode);
            cs.setNString(12, givenSubMenu);
            cs.setNString(13, givenSubCode);
            cs.setNString(14, givenChildMenu);
            cs.setNString(15, givenChildCode);
            cs.setNString(16, givenGChildMenu1);
            cs.setNString(17, givenGChildCode1);
            cs.setNString(18, givenGChildMenu2);
            cs.setNString(19, givenGChildCode2);
            cs.setNString(20, givenGChildMenu3);
            cs.setNString(21, givenGChildCode3);
            cs.setNString(22, givenGChildMenu4);
            cs.setNString(23, givenGChildCode4);
            cs.setNString(24, givenGChildMenu5);
            cs.setNString(25, givenGChildCode5);
            cs.setInt(26, givenSequence);
            
            int saveflag = cs.executeUpdate();
            if(saveflag < 0){
                JOptionPane.showMessageDialog(jFrame, "App DataSource had successfully udpated record", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                result =  true;
            }
            
         return result;
         
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Update App DataSource Record Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                 
                return result;
        }
    }
   
    private static boolean InsertAppDataSource(String givenProjCode, String givenTestCaseId, String givenUserType, String givenUserCode, 
            String givenMainModule, String givenSubModule,String givenFunctionCode, String givenFunctionMap, String givenMainMenu, String givenMainCode, 
            String givenSubMenu, String givenSubCode, String givenChildMenu, String givenChildCode, String givenGChildMenu1, String givenGChildCode1,
            String givenGChildMenu2, String givenGChildCode2, String givenGChildMenu3, String givenGChildCode3, String givenGChildMenu4, String givenGChildCode4, 
            String givenGChildMenu5, String givenGChildCode5, String givenNvarTemp1,String givenNvarTemp2, String givenNvarTemp3, String givenNvarTemp4, 
            String givenNvarTemp5, int givenIntTemp1, int givenIntTemp2, int givenIntTemp3, int givenIntTemp4, int givenIntTemp5, int givenSequence){
        JFrame jFrame = new JFrame();
        boolean result = false;
      
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Insert_AppDataSource(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            
            /*
            1-@proj_code NVARCHAR(20),
            2@testcaseid  NVARCHAR(12),
            3@usertype  NVARCHAR(10),
            4@user_code NVARCHAR(20),
            5@main_module  NVARCHAR(50),
            6@sub_module  NVARCHAR(50),
            7@function_code  NVARCHAR(20),
            8@function_map NVARCHAR(100),
            9@main_menu  NVARCHAR(100),
            10@main_menucode NVARCHAR(50),
            11@sub_menu  NVARCHAR(100),
            12@sub_menucode NVARCHAR(50),
            13@child_menu  NVARCHAR(100),
            14@child_menucode NVARCHAR(50),
            15@gchild1_menu NVARCHAR(100),
            16@gchild1_menucode NVARCHAR(50),
            17@gchild2_menu NVARCHAR(100),
            18@gchild2_menucode NVARCHAR(50),
            19@gchild3_menu NVARCHAR(100),
            20@gchild3_menucode NVARCHAR(50),
            21@gchild4_menu NVARCHAR(100),
            22@gchild4_menucode NVARCHAR(50),
            23@gchild5_menu NVARCHAR(100),
            24@gchild5_menucode NVARCHAR(50),
            25@nvartemp1 NVARCHAR(500),
            26@nvartemp2 NVARCHAR(500),
            27@nvartemp3 NVARCHAR(500),
            28@nvartemp4 NVARCHAR(500),
            29@nvartemp5 NVARCHAR(500),
            30@inttemp1 INT,
            31@inttemp2 INT,
            32@inttemp3 INT,
            33@inttemp4 INT,
            34@inttemp5 INT,
            35@sequence INT             
            */
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setNString(3, givenUserType);
            cs.setNString(4, givenUserCode);
            cs.setNString(5, givenMainModule);
            cs.setNString(6, givenSubModule);
            cs.setNString(7, givenFunctionCode);
            cs.setNString(8, givenFunctionMap);
            cs.setNString(9, givenMainMenu);
            cs.setNString(10, givenMainCode);
            cs.setNString(11, givenSubMenu);
            cs.setNString(12, givenSubCode);
            cs.setNString(13, givenChildMenu);
            cs.setNString(14, givenChildCode);
            cs.setNString(15, givenGChildMenu1);
            cs.setNString(16, givenGChildCode1);
            cs.setNString(17, givenGChildMenu2);
            cs.setNString(18, givenGChildCode2);
            cs.setNString(19, givenGChildMenu3);
            cs.setNString(20, givenGChildCode3);
            cs.setNString(21, givenGChildMenu4);
            cs.setNString(22, givenGChildCode4);
            cs.setNString(23, givenGChildMenu5);
            cs.setNString(24, givenGChildCode5);
            cs.setNString(25, givenNvarTemp1);
            cs.setNString(26, givenNvarTemp2);
            cs.setNString(27, givenNvarTemp3);
            cs.setNString(28, givenNvarTemp4);
            cs.setNString(29, givenNvarTemp5);
            cs.setInt(30, givenIntTemp1);
            cs.setInt(31, givenIntTemp2);
            cs.setInt(32, givenIntTemp3);
            cs.setInt(33, givenIntTemp4);
            cs.setInt(34, givenIntTemp5);
            cs.setInt(35, givenSequence);

            int executeflag = cs.executeUpdate();
            if(executeflag < 0){
                //JOptionPane.showMessageDialog(jFrame, "Record has been successfully saved", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                result = true;
            }
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Insert New App DataSource Record Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                 
                return result;            
        }
    }
    
    private static boolean SearchGreaterEqual_Increase(String givenProjCode, String givenTestCaseId, int givenSequence, int givenExcludeRecId){
        JFrame jFrame = new JFrame();
        boolean result = false;
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            //CallableStatement cs = conn.prepareCall("{call Update_AppDataSourceSequenceInc_ByIdProjCodeTestCaseIdSeq(?,?,?)}");
            CallableStatement cs = conn.prepareCall("{call Search_AppDataSource_GreaterEqualSeq(?,?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setInt(3, givenSequence);
            
            ResultSet rs = cs.executeQuery();

            while(rs.next()){
                int RecordId = rs.getInt(1);
                int givenFromSeq = rs.getInt(2);
                int givenToSeq = givenFromSeq + 1;
                
                if(RecordId != givenExcludeRecId){
                    //UpdateSequenceNum(int givenRecordId, String givenProjCode, String givenTestCaseId, int givenFromSeqNum, int givenToSeqNum)
                    if(UpdateSequenceNum(RecordId, givenProjCode, givenTestCaseId, givenFromSeq, givenToSeq)){
                        result = true;
                    }                    
                }
            }
            
            
            /*
            int excecuteflag = cs.executeUpdate();
            if(excecuteflag < 0){
                //JOptionPane.showMessageDialog(jFrame, "Record has been successfully saved", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                result = true;                
            }
            */
            //conn.commit();
            rs.close();
            cs.close();
            conn.close();
            if(result == false){
                result = true;
            }
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Insert New App DataSource Record Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);              
                        return result;
        }
    }
    
    private static boolean SearchGreater_Decrease(String givenProjCode, String givenTestCaseId, int givenSequence){
            JFrame jFrame = new JFrame();
        boolean result = false;
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            //CallableStatement cs = conn.prepareCall("{call Update_AppDataSourceSequenceInc_ByIdProjCodeTestCaseIdSeq(?,?,?)}");
            CallableStatement cs = conn.prepareCall("{call Search_AppDataSource_GreaterSeq(?,?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setInt(3, givenSequence);
            
            ResultSet rs = cs.executeQuery();

            while(rs.next()){
                int RecordId = rs.getInt(1);
                int givenFromSeq = rs.getInt(2);
                int givenToSeq = givenFromSeq - 1;
                
                //UpdateSequenceNum(int givenRecordId, String givenProjCode, String givenTestCaseId, int givenFromSeqNum, int givenToSeqNum)
                if(UpdateSequenceNum(RecordId, givenProjCode, givenTestCaseId, givenFromSeq, givenToSeq)){
                    result = true;
                }
            }
            
            
            /*
            int excecuteflag = cs.executeUpdate();
            if(excecuteflag < 0){
                //JOptionPane.showMessageDialog(jFrame, "Record has been successfully saved", "App DataSource - Maintenance", JOptionPane.INFORMATION_MESSAGE);
                result = true;                
            }
            */
            //conn.commit();
            rs.close();
            cs.close();
            conn.close();
            if(result == false){
                result = true;
            }
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Insert New App DataSource Record Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);              
                        return result;
        }    
    }
    
    private static boolean UpdateNextRecord_Decrease(String givenProjCode, String givenTestCaseId, int givenSequence){
        JFrame jFrame = new JFrame();
        boolean result = false;
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Update_AppDataSourceSequenceDec_ByIdProjCodeTestCaseIdSeq(?,?,?)}");
            
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            cs.setInt(3, givenSequence);
            
            int executeflag = cs.executeUpdate();
            
            if(executeflag > 0){
                result = true;
            }
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Update App DataSource Record Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);           
            return result;
        }
    }
    
    private static boolean validateExistingTestCase(String givenProjCode, String givenTestCaseId){
        JFrame jFrame = new JFrame();
        boolean result = false;
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Search_AllAppDataSource_ByProjCodeTestCaseId(?,?)}");
            cs.setNString(1, givenProjCode);
            cs.setNString(2, givenTestCaseId);
            
            ResultSet rs = cs.executeQuery();
            if(rs.next()){
                result = true;
            }
            else{
                result = false;
            }
            rs.close();
            cs.close();
            conn.close();
            
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Validate Test Case ID Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                  
            return result;
        }
    }
    
    private static boolean DeleteRecord(int givenRecordId, String givenProjCode, String givenTestCaseId){
        JFrame jFrame = new JFrame();
        boolean result = false;
        
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Delete_AppDataSource(?,?,?)}");
            cs.setInt(1, givenRecordId);
            cs.setNString(2, givenProjCode);
            cs.setNString(3, givenTestCaseId);
            
            int executeflag = 0;
            executeflag = cs.executeUpdate();
            if(executeflag < 0){
                //Call function to update record sequence decrease
                result = true;
            }
            conn.commit();
            cs.close();
            conn.close();
            return result;
        }
        catch(Exception ex){
                String errMessage = null;

                errMessage = "Error Message: " + ex.getMessage() + 
                   "\n" + "Error Localize Message: " + ex.getLocalizedMessage() + 
                   "\n" + "Stack Trace: " + ex.getStackTrace() + 
                   "\n" + "Cause: " + ex.getCause();

                System.out.println(errMessage);

                //if(execFlag <= 0 ){
                JOptionPane.showMessageDialog(jFrame,  "Delete Record Failed" + 
                               "\n" + errMessage, "App DataSource - Maintenance", 0);                     
            return result;
        }
    }
    
    private static boolean UpdateSequenceNum(int givenRecordId, String givenProjCode, String givenTestCaseId, int givenFromSeqNum, int givenToSeqNum){
        JFrame jFrame = new JFrame();
        boolean result = false;
        try{
            Connection conn = ewb.qa.tdd.SQLObj.ConnToDB();
            CallableStatement cs = conn.prepareCall("{call Update_AppDataSourceSequence(?,?,?,?,?)}");
            /*
            @recordid int,
            @proj_code NVARCHAR(20),
            @testcaseid  NVARCHAR(12),
            @oldseqnum int,
            @newseqnum int            
            */
            cs.setInt(1, givenRecordId);
            cs.setNString(2, givenProjCode);
            cs.setNString(3, givenTestCaseId);
            cs.setInt(4, givenFromSeqNum);
            cs.setInt(5, givenToSeqNum);
            
            int executeflag = cs.executeUpdate();
            if(executeflag < 0){
                result = true;
                conn.commit();
            }

            cs.close();
            conn.close();
            
            return result;
        }
        catch(Exception ex){
            
            return result;
        }
    }
    
    //******************************************************************************************************************************************************************************************************************
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AppDataSourceTbl;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton CancelBtn;
    private javax.swing.JButton ChangeBtn;
    private javax.swing.JComboBox<String> ChildCodeCmb;
    private javax.swing.JTextField ChildMenuTxt;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JComboBox<String> FunctionCodeCmb;
    private javax.swing.JTextField FunctionMapTxt;
    private javax.swing.JRadioButton FunctionOpt;
    private javax.swing.JComboBox<String> GChildCode1Cmb;
    private javax.swing.JComboBox<String> GChildCode2Cmb;
    private javax.swing.JComboBox<String> GChildCode3Cmb;
    private javax.swing.JTextField GChildMenu1Txt;
    private javax.swing.JTextField GChildMenu2Txt;
    private javax.swing.JTextField GChildMenu3Txt;
    private javax.swing.JTextField IdTxt;
    private javax.swing.JComboBox<String> MainCodeCmb;
    private javax.swing.JTextField MainMenuTxt;
    private javax.swing.JTextField MainModuleTxt;
    private javax.swing.JButton NewBtn;
    private javax.swing.JRadioButton ProductOpt;
    private javax.swing.JTextField ProjCodeTxt;
    private javax.swing.JTextField ProjDescTxt;
    private javax.swing.JButton SaveBtn;
    private javax.swing.JTextField SequenceTxt;
    private javax.swing.JComboBox<String> SubCodeCmb;
    private javax.swing.JTextField SubMenuTxt;
    private javax.swing.JTextField SubModuleTxt;
    private javax.swing.JComboBox<String> TestCaseIdCmb;
    private javax.swing.JComboBox<String> UserCodeCmb;
    private javax.swing.JTextField UserTypeTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
